
(C) 2008-2023 Advanced Micro Devices, Inc. All Rights Reserved.

AOCL LibM - Release Notes - AOCL version 4.1.0
----------------------------------------------

AOCL LibM Contents
------------------
AOCL-LibM is a high-performant implementation of LibM, the standard C library of basic floating-point mathematical functions. It includes many of the functions from the C99 standard. Single and double precision versions of the functions are provided, all optimized for accuracy and performance, including a small number of complex functions. There are also a number of vector and fast scalar variants provided, in which a small amount of the accuracy has been traded for greater performance.

Highlights of AOCL LibM version 4.1.0
-------------------------------------
Added erf function

Added vector array arithmetic functions:
 - vrsa_addf, vrsa_addfi, vrda_add, vrda_addi
 - vrsa_subf, vrsa_subfi, vrda_sub, vrda_subi
 - vrsa_mulf, vrsa_mulfi, vrda_mul, vrda_muli
 - vrsa_divf, vrsa_divfi, vrda_div, vrda_divi

Added new vector functions:
 - vrd2_erf, vrd4_erf and vrd8_erf
 - vrs16_erff
 - vrd4_sincos and vrd8_sincos
 - vrs16_tanhf, vrs16_cosf, vrs16_acosf

Optimized the performance of:
 - vrd2_pow, vrd4_pow and vrd8_pow
 - exp2 and log2

Improved the accuracy of:
 - atan and cos

Added optimized versions of:
 - fminf, fmin, remainderf, remainder, nearbyintf, nearbyint, cbrt

Fast scalar variants:
 - fasterff improved and fasterf added
 - fastpowf improved

Added support for the aocl-utils library

Known Issues
------------
    * fastpow() - Maximum ULP error is 10.

Version 4.1.0 Contents
----------------------
AOCL LibM provides vector variants for many of the math functions. The list of
available vector functions is given below. All functions have an 'amd_' prefix.

 Exponential
 -----------
    * vrs4_expf, vrs4_exp2f, vrs4_exp10f, vrs4_expm1f
    * vrs8_expf, vrs8_exp2f
    * vrs16_expf, vrs16_exp2f
    * vrsa_expf, vrsa_exp2f, vrsa_exp10f, vrsa_expm1f
    * vrd2_exp, vrd2_exp2, vrd2_exp10, vrd2_expm1, vrd4_exp, vrd4_exp2
    * vrd8_exp, vrd8_exp2
    * vrda_exp, vrda_exp2, vrda_exp10, vrda_expm1

 Logarithmic
 -----------
    * vrs4_logf, vrs4_log2f, vrs4_log10f, vrs4_log1pf
    * vrs8_logf, vrs8_log2f
    * vrs16_logf, vrs16_log2f, vrs16_log10f
    * vrsa_logf, vrsa_log2f, vrsa_log10f, vrsa_log1pf
    * vrd2_log, vrd2_log2, vrd2_log10, vrd2_log1p, vrd4_log, vrd4_log2
    * vrd8_log, vrd8_log2
    * vrda_log, vrda_log2, vrda_log10, vrda_log1p

 Trigonometric
 -------------
    * vrs4_cosf, vrs4_sinf
    * vrsa_cosf, vrsa_sinf
    * vrd2_cos, vrd2_sin, vrd2_cosh, vrd2_sincos, vrd4_sincos, vrd8_sincos
    * vrda_cos, vrda_sin

 Hyperbolic
 ----------
    * vrs4_coshf, vrs4_tanhf
    * vrs8_coshf, vrs8_tanhf

 Power
 -----
    * vrs4_cbrtf, vrd2_cbrt, vrs4_powf, vrd2_pow, vrd4_pow, vrd8_pow
    * vrs8_powf, vrs16_powf
    * vrsa_cbrtf, vrda_cbrt, vrsa_powf

 Error
 -----
    * vrs4_erff, vrs8_erff, vrs16_erff
    * vrd2_erf, vrd4_erf, vrd8_erf

The scalar functions listed below are present in the library. They
all have an 'amd_' prefix.

 Trigonometric
 -------------
    * cosf, cos, sinf, sin, tanf, tan, sincosf, sincos
    * acosf, acos, asinf, asin, atanf, atan, atan2f, atan2

 Hyperbolic
 ----------
    * coshf, cosh, sinhf, sinh, tanhf, tanh
    * acoshf, acosh, asinhf, asinh, atanhf, atanh

 Exponential & Logarithmic
 -------------------------
    * expf, exp, exp2f, exp2, exp10f, exp10, expm1f, expm1
    * logf, log, log10f, log10, log2f, log2, log1pf, log1p
    * logbf, logb, ilogbf, ilogb
    * modff, modf, frexpf, frexp, ldexpf, ldexp
    * scalbnf, scalbn, scalblnf, scalbln

 Power & Absolute value
 ----------------------
    * powf, pow, cbrtf, cbrt, sqrtf, sqrt, hypotf, hypot
    * fabsf, fabs

 Nearest integer
 ---------------
    * ceilf, ceil, floorf, floor, truncf, trunc
    * rintf, rint, roundf, round, nearbyintf, nearbyint
    * lrintf, lrint, llrintf, llrint
    * lroundf, lround, llroundf, llround

 Remainder
 ---------
    * fmodf, fmod, remainderf, remainder

 Manipulation
 ------------
    * copysignf, copysign, nanf, nan, finitef, finite
    * nextafterf, nextafter, nexttowardf, nexttoward

 Maximum, Minimum & Difference
 -----------------------------
    * fdimf, fdim, fmaxf, fmax, fminf, fmin

 Complex
 -------
    * cexpf, cexp, cpowf, cpow, clogf, clog

 Error
 -----
    * erff, erf

The declarations for all of these functions are as specified in the
C99 standard. They are equivalent to the declarations present in
the standard math header 'math.h'.

Using AOCL LibM
---------------
Using AOCL LibM is easy. Including math.h is sufficient for use of
scalar routines. For vector routines, use amdlibm_vec.h in your
C/C++ code and call the desired routine. Link in the appropriate
version of the library in your program.

Refer to the examples directory for illustration.

The Linux libraries have a dependency on system math library. When
linking AOCL LibM, ensure it precedes system math library in the
link order i.e., "-lalm" should come before "-lm". Explicit
linking of system math library is required when using gcc C
compiler. With g++ compiler (for C++), this is not needed.

Refer to the examples directory for illustration.

Note: There is a fast version of AOCL LibM released as part of the package. (libalmfast.so)
This library contains faster variants of some of the scalar functions.
To use this in an application, the user has to preload the library while running the
application:
    LD_PRELOAD=<path to aocl installation>/lib/libalmfast.so ./test_application;
