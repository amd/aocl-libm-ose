
(C) 2008-2023 Advanced Micro Devices, Inc. All Rights Reserved.

AOCL LibM - Release Notes - AOCL version 4.0.1
----------------------------------------------

AOCL LibM Contents
------------------
AOCL LibM is a software library containing a collection of basic math functions
optimized for x86-64 processor-based machines.
It provides many routines from the list of standard C99 math functions.
It includes scalar as well as vector variants of the core math functions.
AOCL LibM is a C library, which users can link into their applications to replace
compiler-provided math functions. Applications can link into AOCL LibM library and
invoke math functions instead of compilerâ€™s math functions for better accuracy and
performance.

Highlights of AOCL LibM version 4.0.1
-------------------------------------
    * Corrected "Optimized" directory typo
    * Updated examples README doc with corrected build steps
    * Enabled mpfr variant of fmin and fminf functions
    * Optimized scalar variant of fmin and fminf functions. Observing ~10% perf improvement
      on windows and ~5% improvement on linux platform
    * Added fmin and fminf functions in gtests and examples
    * Corrected build steps when ASAN is needed on linux platform
    * Added AVX512 version of double-precision erf() in src, gtests and examples
    * Resolved issue with GetLastError() function on windows
    * Added support for Clang-15/Clang-16 on windows and GCC-12.2.0 on linux
    * Added support for latest VS2022 on windows
    * Corrected few function signatures in the header
    * Corrected the name of the fast library and the size of the maximum error
    * Improvements to erff using AVX512dq intrinsics
    * Added new vrd4 and vrd8 versions of sincos
    * Bugs resolved/closed: CPUPL-3079, CPUPL-3047, CPUPL-3061, CPUPL-3048, CPUPL-1792, CPUPL-1820

Known Issues
------------
    * fastpow() - Maximum ULP error is 10.

Version 4.0.1 Contents
----------------------
AOCL LibM provides vector variants for many of the math functions. The list of
available vector functions is given below. All functions have an 'amd_' prefix.

 Exponential
 -----------
    * vrs4_expf, vrs4_exp2f, vrs4_exp10f, vrs4_expm1f
    * vrs8_expf, vrs8_exp2f
    * vrs16_expf, vrs16_exp2f
    * vrsa_expf, vrsa_exp2f, vrsa_exp10f, vrsa_expm1f
    * vrd2_exp, vrd2_exp2, vrd2_exp10, vrd2_expm1, vrd4_exp, vrd4_exp2
    * vrd8_exp, vrd8_exp2
    * vrda_exp, vrda_exp2, vrda_exp10, vrda_expm1

 Logarithmic
 -----------
    * vrs4_logf, vrs4_log2f, vrs4_log10f, vrs4_log1pf
    * vrs8_logf, vrs8_log2f
    * vrs16_logf, vrs16_log2f, vrs16_log10f
    * vrsa_logf, vrsa_log2f, vrsa_log10f, vrsa_log1pf
    * vrd2_log, vrd2_log2, vrd2_log10, vrd2_log1p, vrd4_log, vrd4_log2
    * vrd8_log, vrd8_log2
    * vrda_log, vrda_log2, vrda_log10, vrda_log1p

 Trigonometric
 -------------
    * vrs4_cosf, vrs4_sinf
    * vrsa_cosf, vrsa_sinf
    * vrd2_cos, vrd2_sin, vrd2_cosh, vrd2_sincos, vrd4_sincos, vrd8_sincos
    * vrda_cos, vrda_sin

 Hyperbolic
 ----------
    * vrs4_coshf, vrs4_tanhf
    * vrs8_coshf, vrs8_tanhf

 Power
 -----
    * vrs4_cbrtf, vrd2_cbrt, vrs4_powf, vrd2_pow, vrd4_pow, vrd8_pow
    * vrs8_powf, vrs16_powf
    * vrsa_cbrtf, vrda_cbrt, vrsa_powf

 Error
 -----
    * vrs4_erff, vrs8_erff, vrs16_erff
    * vrd2_erf, vrd4_erf, vrd8_erf

The scalar functions listed below are present in the library. They
all have an 'amd_' prefix.

 Trigonometric
 -------------
    * cosf, cos, sinf, sin, tanf, tan, sincosf, sincos
    * acosf, acos, asinf, asin, atanf, atan, atan2f, atan2

 Hyperbolic
 ----------
    * coshf, cosh, sinhf, sinh, tanhf, tanh
    * acoshf, acosh, asinhf, asinh, atanhf, atanh

 Exponential & Logarithmic
 -------------------------
    * expf, exp, exp2f, exp2, exp10f, exp10, expm1f, expm1
    * logf, log, log10f, log10, log2f, log2, log1pf, log1p
    * logbf, logb, ilogbf, ilogb
    * modff, modf, frexpf, frexp, ldexpf, ldexp
    * scalbnf, scalbn, scalblnf, scalbln

 Power & Absolute value
 ----------------------
    * powf, pow, cbrtf, cbrt, sqrtf, sqrt, hypotf, hypot
    * fabsf, fabs

 Nearest integer
 ---------------
    * ceilf, ceil, floorf, floor, truncf, trunc
    * rintf, rint, roundf, round, nearbyintf, nearbyint
    * lrintf, lrint, llrintf, llrint
    * lroundf, lround, llroundf, llround

 Remainder
 ---------
    * fmodf, fmod, remainderf, remainder

 Manipulation
 ------------
    * copysignf, copysign, nanf, nan, finitef, finite
    * nextafterf, nextafter, nexttowardf, nexttoward

 Maximum, Minimum & Difference
 -----------------------------
    * fdimf, fdim, fmaxf, fmax, fminf, fmin

 Complex
 -------
    * cexpf, cexp, cpowf, cpow, clogf, clog

 Error
 -----
    * erff, erf

The declarations for all of these functions are as specified in the
C99 standard. They are equivalent to the declarations present in
the standard math header 'math.h'.

Using AOCL LibM
---------------
Using AOCL LibM is easy. Including math.h is sufficient for use of
scalar routines. For vector routines, use amdlibm_vec.h in your
C/C++ code and call the desired routine. Link in the appropriate
version of the library in your program.

Refer to the examples directory for illustration.

The Linux libraries have a dependency on system math library. When
linking AOCL LibM, ensure it precedes system math library in the
link order i.e., "-lalm" should come before "-lm". Explicit
linking of system math library is required when using gcc C
compiler. With g++ compiler (for C++), this is not needed.

Refer to the examples directory for illustration.

Note: There is a fast version of AOCL LibM released as part of the package. (libalmfast.so)
This library contains faster variants of some of the scalar functions.
To use this in an application, the user has to preload the library while running the
application:
    LD_PRELOAD=<path to aocl installation>/lib/libalmfast.so ./test_application;
