* Coding Style

General Guidelines:

1. Don't try to write the most compact code possible but rather the most
   readable.

2. Avoid goto's (not eliminate at the cost of readability and simplicity)

3. No tabs expanded to spaces.

** Editor
Any editor of your choice, avoid brainded, bloated or over-intelligent ones.

braindead:

notepad - dos line endings, seriously?.
notepad++ - braindead++

bloated:
eclipse - need a server to run
visualstudio - not now.

over-intelligent:
<oh many>

vim configuration:


indent command: 

Indent command related options are provided in indent-options
file under 'tools' directory.


** Whitespace

- Indents are four spaces.  
- Tabs are never used, except in Makefiles (which don't exist anymore :) )

- Do not leave whitespace dangling off the ends of lines.
 a.k.a Trailing whitespaces

Whitespace around every operator
#+BEGIN_SRC c
if(c==0)
// VS
if (c == 0)
   //^//^
#+END_SRC

Whitespace after 'if' 'while' and 'for', 'switch'
#+BEGIN_SRC c
for (i = 0; i < 5; i++) {}
// ^
while () {
} // ^

do {
//^
while (cond) ;
  // ^

if (cond)
//^
switch (case_val) {
}
#+END_SRC

The parenthesis should be on the same line in compound statements 'if', 'while'
'for' and 'switch'
#+BEGIN_SRC c
while (cond) {
}         // ^

for (...) {
}      // ^

if (cond) {
}      // ^

switch (cond) {
}          // ^
#+END_SRC

** Alignment
Switch - case, the 'case' statements aligned with switch.
#+BEGIN_SRC c
switch(something) {
case 1:
break;
case 2:
break;
default:
break;
}
#+END_SRC

goto labels should be aligned on the column '1'.
#+BEGIN_SRC c
  func () {
      if (cond) {
          print("error\n");
          goto out;
      }
  out:
      return 0;
  }
#+END_SRC

** Line width

Lines are 80 characters; not longer.
Do anything that takes to cut the long lines,
eg:
#+BEGIN_SRC c
  if (condition_true)
    struct libm_test *exp2_v2d = libm_test_alloc_init(conf, &exp2_test_template);
#+END_SRC

Write instead like this
#+BEGIN_SRC c
  struct libm_test *exp2_v2d;

  exp2_v2d = libm_test_alloc_init(conf, &exp2_test_template);
#+END_SRC


** Naming

 - Variables are function names lower_case_with_underscores; easy to type and read.
eg:
#+BEGIN_SRC c
   uint8_t *test_data;
#+END_SRC

 - Structured type names are in CamelCase; harder to type but standing out.
#+BEGIN_SRC c
LibmTestData *data;
LibmTest     *test;
#+END_SRC

 - enum or #defined constants should be Uppercase (or UPPER-CASE).
#+BEGIN_SRC c
#define DBG_BIT 1

// And

enum {
TEST_TYPE_ACCU
};
#+END_SRC
 - Scalar type names are lower_case_with_underscores_ending_with_a_t,
   like the POSIX uint64_t and family.

When wrapping standard library functions, use the prefix amd_libm_ to alert
readers that they are seeing a wrapped version; otherwise avoid this prefix.

** Code
1. 
1. follow the standard idioms: use `x < 0' not `0 > x', etc.
2. don't write `!strcmp' (nor `!memcmp', etc.)  nor
             `if(memcmp(a, b, c))'; always explicitly compare the
             result of string or memory comparison with zero using a
             relational operator.
#+BEGIN_SRC c
if (strncmp(c, "abcd", 5) == 0)
#+END_SRC



** Block structure
Avoid unwanted braces, though the following looks okay,
Example:
#+BEGIN_SRC c
    if (a == 5) {
        printf("a was 5.\n");
    } else if (a == 6) {
        printf("a was 6.\n");
    } else {
        printf("a was something else entirely.\n");
    }
#+END_SRC

Following looks better
#+BEGIN_SRC c
  if (a == 5)
      printf("a was 5.\n");
  else if (a == 6)
      printf("a was 6.\n");
  else
      printf("a was something else entirely.\n");
#+END_SRC

Note that 'else if' is considered a single statement; otherwise a long if/
else if/else if/.../else sequence would need an indent for every else
statement.

An exception is the opening brace for a function; for reasons of tradition
and clarity it will have a line for itself.
#+BEGIN_SRC c
  void a_function(void)
  {
      do_something();
  }
#+END_SRC

Rationale: a consistent (except for functions...) bracing style reduces
ambiguity and avoids needless churn when lines are added or removed.
Furthermore, it is the QEMU coding style.

** Comments
- If your code is readable, you shouldn't need many comments. A line or two
  comment above a function explaining what it does is always welcome.

- Comment any code you find yourself wondering about for more than 2 seconds,
  even if it's to say that you don't under- stand what's going on. Explain why.

- Don't use commenting as an excuse for writing confusing code. Rewrite the code
  to make it clear.
