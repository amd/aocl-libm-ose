#
# Copyright (C) 2008-2022 Advanced Micro Devices, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


import os
from os import path
from os.path import join as joinpath

Import('env')

build_dir = joinpath(env['BUILDROOT'], 'gbench')
genv = env.Clone()

if genv['HOST_OS'] != 'win32':
    gflags = [
    '-std=c++11','-O3', '-DNDEBUG','-Wno-deprecated',
    '-Wall', '-Wextra', '-Wshadow', '-fstrict-aliasing',
    '-Wno-deprecated-declarations', '-Werror',
    '-fPIC',
    '-DHAVE_POSIX_REGEX',
    '-DHAVE_STD_REGEX',
    '-DHAVE_STEADY_CLOCK'
    ]
    liblist = ['pthread']
    genv.Replace(CC='gcc',LINKFLAGS=[])

else:
    gflags = ['-Dlibbenchmark_EXPORTS']
    if genv['BUILD'] == 'release':
        gflags.append('/DNDEBUG')
    liblist = ['Shlwapi']
    exclude_flags=['/std:c17', '-funsigned-char', '-Wno-unused-parameter', '-march=native', '-std:c++17']
    for i in exclude_flags:
        if i in genv['CFLAGS']:
            genv['CFLAGS'].remove(i)
            genv['CCFLAGS'].remove(i)

this_sconscript_file = Dir('.').srcnode().abspath

ccflags = []
incpath = [ joinpath(this_sconscript_file, x) for x in ['.', './src']]
libpath = []

genv.Append(
    CCFLAGS  = gflags,
    CPPPATH  = [incpath],
    LIBS     = liblist,
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1
)

libbenchmark = SConscript('build_gbench',
        exports = {'genv': genv},
        duplicate = 0,
    )

Return('libbenchmark')

