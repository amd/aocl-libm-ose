#
# Copyright (C) 2019 Prem Mallappa.
#
#
# Author: Prem Mallappa<prem.mallappa@gmail.com>
#
import os
from os import path
from os.path import join as joinpath

Import('env')

build_dir = joinpath(env['BUILDROOT'], 'gtest')
genv = env.Clone()

if genv['HOST_OS'] != 'win32':
    gflags = [
    '-std=c++11','-O3', '-DNDEBUG','-Wno-deprecated',
    '-Wall', '-Wextra', '-fstrict-aliasing',
    '-Wno-deprecated-declarations','-Wstrict-aliasing',
    '-Werror','-Wno-error=dangling-else','-fexceptions',
    '-Wno-unused-parameter','-Wno-missing-field-initializers',
    '-fPIC',
    '-DGTEST_HAS_PTHREAD=1',
    ]
    liblist = ['pthread']
    genv.Replace(CC='gcc',LINKFLAGS=[])

else:
    gflags=['/std:c++11']
    liblist = []
    exclude_flags=['/std:c17', '-funsigned-char', '-Wno-unused-parameter', '-march=native', '-std:c++17']
    for i in exclude_flags:
        if i in genv['CFLAGS']:
                genv['CFLAGS'].remove(i)
                genv['CCFLAGS'].remove(i)

this_sconscript_file = Dir('.').srcnode().abspath

ccflags = []
incpath = [ joinpath(this_sconscript_file, x) for x in ['.', './src']]
libpath = []

genv.Append(
    CCFLAGS  = gflags,
    CPPPATH  = [incpath],
    LIBS     = liblist,
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1
)

libgtest = SConscript('build_gtest',
        exports = {'genv': genv},
        duplicate = 0,
    )


Return('libgtest')

