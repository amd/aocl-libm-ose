#ifndef __TEST_LOG_DATA_H__
#define __TEST_LOG_DATA_H__
/*
 * Copyright (C) 2019-2020 Advanced Micro Devices, Inc. All rights reserved
 */

#include <fenv.h>
#include "almstruct.h"

/* Test cases to check for exceptions for the log() routine. These test cases are not exhaustive */
static  libm_test_special_data_f64 test_log_conformance_data[] = {
    {0x0000000000000000, 0xfff0000000000000, 4,},//0 -inf
    {0x8000000000000000, 0xfff0000000000000, 4,}, // -0  -inf
    {0x3ff0000000000000, 0x0000000000000000, 0,},//1, 0
    {0xbff0000000000000, 0x7ff8000000000000, FE_INVALID,},   //-1 nan
    {0x7FF0000000000000, 0x7ff0000000000000, 0,}, //inf, inf
    {0xfff0000000000000, 0x7ff8000000000000, FE_INVALID,},//-inf, nan
    {0x7ff87ff7fdedffff, 0x7ff87ff7fdedffff, 0,},//nan, nan
    {0x7ff07ff7fdedffff, 0x7ff87ff7fdedffff, FE_INVALID,},//snan, nan
    {0xfff07ff7fdedffff, 0xfff87ff7fdedffff, FE_INVALID,},//-nan, -nan
    {0x7ff87ff7fdedffff, 0x7ff87ff7fdedffff, 0,},//qnan, qnan
    {0xfff2000000000000, 0xfffa000000000000, FE_INVALID,},   //-qnan, -qnan
    //newly added 
    {0x1f90000000000000, 0xc07670cdc7f7289d, 0,}, // log(1.165366e-156 = smallest) = -3.590502e+002
    {0x4005bf0a8b145769, 0x3fefffffffffffff, 0,}, // log(2.718282 == M_E) = 1.
    {0x7fefffffffffffff, 0x40862e42fefa39ef, 0,}, // log(1.79769e+308 = largest) = 7.097827128934e+002

    {0x3ff0000000000000, 0x0000000000000000, 0,}, 	// 2: log(1.000000000000e+000)=	0.000000000000e+000
    {0x3fd3e9e507ee8de9, 0xbff2adfcfff9be7b, 0,}, 	// 3: log(3.111507966480e-001)=	-1.167477607636e+000
    {0x4010905a2be3af94, 0x3ff6bc20e63ebf38, 0,}, 	// 4: log(4.140968976757e+000)=	1.420929812808e+000
    {0x3ffa71d0be141803, 0x3fe0142d2449b180, 0,}, 	// 5: log(1.652786962980e+000)=	5.024629315135e-001
    {0x3f8d024fdbbc0f01, 0xc011072e19391a74, 0,}, 	// 6: log(1.416456593825e-002)=	-4.257011789427e+000
    {0x3f530d37067e3e98, 0xc01b0712fb2c5d84, 0,}, 	// 7: log(1.162818656642e-003)=	-6.756908344825e+000
    {0x3fddf848f81806bc, 0xbfe84731d7d8aa93, 0,}, 	// 8: log(4.682791159431e-001)=	-7.586907592534e-001
    {0x400314a7c67e7ec5, 0x3febd0c5fa1436ce, 0,}, 	// 9: log(2.385085631118e+000)=	8.692350277285e-001
    {0x40958da5241b1163, 0x401ceaeaff82efea, 0,}, 	// 10: log(1.379411270545e+003)=	7.229412071578e+000
    {0x408a517104d110e4, 0x401af1a8686db7a3, 0,}, 	// 11: log(8.421801849683e+002)=	6.735993987748e+000
    {0x40836de011429037, 0x4019bae4b0681054, 0,}, 	// 12: log(6.217344079209e+002)=	6.432513004638e+000
    {0x1df3dd395cc6e2b6, 0xc0778db11a593980, 0,}, 	// 13: log(2.155919322765e-164)=	-3.768557380185e+002
    {0x3fdd2b796c81c93e, 0xbfe924d9dda20681, 0,}, 	// 14: log(4.557784614218e-001)=	-7.857484177368e-001
    {0x3f714861e6cded36, 0xc015df4a7fafd6f3, 0,}, 	// 15: log(4.219419887586e-003)=	-5.468057627780e+000
    {0x3877d068c644a143, 0xc054b1eb1232afa5, 0,}, 	// 16: log(1.119733541164e-036)=	-8.277997260046e+001
    {0x4005065481afef57, 0x3feeeb9538d6688c, 0,}, 	// 17: log(2.628090871030e+000)=	9.662576780422e-001
    {0x4031e0c61fc50077, 0x4007118e4d4b8851, 0,}, 	// 18: log(1.787802313385e+001)=	2.883572200649e+000
    {0x39f77224ad676e8a, 0xc0508a3dd3a4af5a, 0,}, 	// 19: log(1.849553192960e-029)=	-6.616002360423e+001
    {0x3ff6c1d88b17ebfa, 0x3fd68bf942f8dc18, 0,}, 	// 20: log(1.422325652441e+000)=	3.522933153176e-001
    {0x15e6eeb67b8d7ca7, 0xc07d220ca5506342, 0,}, 	// 21: log(3.657158700400e-203)=	-4.661280873432e+002
    {0x40449a6462635eb6, 0x400dbfab4d44b91c, 0,}, 	// 22: log(4.120618848660e+001)=	3.718588451061e+000
    {0x3ff0f206565b73f3, 0x3fad649c97715aec, 0,}, 	// 23: log(1.059088075002e+000)=	5.740823124568e-002
    {0x39d09f5191af9654, 0xc050f8fa19cc6a01, 0,}, 	// 24: log(3.278178228385e-030)=	-6.789026493990e+001
    {0x3fc27eec9642f79c, 0xbffef3a858503caa, 0,}, 	// 25: log(1.444984182071e-001)=	-1.934486718153e+000
    {0x3f44b9be92046a8f, 0xc01d769eb4992941, 0,}, 	// 26: log(6.324940223153e-004)=	-7.365839788292e+000
    {0x40035a6576cbc99d, 0x3fec44e875109724, 0,}, 	// 27: log(2.419138839811e+000)=	8.834116255209e-001
    {0x3fc83bc75fbdca10, 0xbffaa0f2936e31c5, 0,}, 	// 28: log(1.893243043410e-001)=	-1.664293838406e+000
    {0x3fe2978a35955225, 0xbfe160505c1fc7c1, 0,}, 	// 29: log(5.809985205220e-001)=	-5.430070685672e-001
    {0x3ff2b4a3ccbf539f, 0x3fc3ff8694be6825, 0,}, 	// 30: log(1.169101524157e+000)=	1.562355257309e-001
    {0x3982a5bd4de6aa36, 0xc051cf6cce4dddd5, 0,}, 	// 31: log(1.149264185844e-031)=	-7.124101598362e+001
    {0x45a876f59c84624e, 0x404fc021ed4a6e34, 0,}, 	// 32: log(3.785726674723e+027)=	6.350103536734e+001
    {0x3f521745aab8891d, 0xc01b3c0f08ee254f, 0,}, 	// 33: log(1.104181322156e-003)=	-6.808651103530e+000
    {0x46affd212a33a48f, 0x4052b702c93599c4, 0,}, 	// 34: log(3.244048434267e+032)=	7.485954504237e+001
    {0x3918a73bfade3e32, 0xc052f4167006690b, 0,}, 	// 35: log(1.187011241997e-033)=	-7.581386948229e+001
    {0x4004464b95ce8ece, 0x3fedc1f602d3c2fc, 0,}, 	// 36: log(2.534323854796e+000)=	9.299268775195e-001
    {0x3f32db3ef92a4eef, 0xc0204e97acc89eb6, 0,}, 	// 37: log(2.877262824452e-004)=	-8.153500937929e+000
    {0x3fddcbd73790dbd0, 0xbfe876c9a3ae3c62, 0,}, 	// 38: log(4.655664484630e-001)=	-7.645004460227e-001
    {0x3fff098a0dd6ff8e, 0x3fe53404774bbb05, 0,}, 	// 39: log(1.939828924238e+000)=	6.625997858044e-001
    {0x3fef9f99687d878e, 0xbf883e3c8972babc, 0,}, 	// 40: log(9.882323304011e-001)=	-1.183745665034e-002
    {0x3fedb96897e41cbe, 0xbfb2e2c32253eedc, 0,}, 	// 41: log(9.288828817961e-001)=	-7.377261722643e-002
    {0x3f6f1dccd452fcdd, 0xc0164aef348b6f91, 0,}, 	// 42: log(3.798389489560e-003)=	-5.573178120623e+000
    {0x3ff3ed3afb080914, 0x3fcc179f264f06d5, 0,}, 	// 43: log(1.245417576400e+000)=	2.194708764128e-001
    {0x48cc2f1f1ff509f1, 0x40589331e63ba9ae, 0,}, 	// 44: log(4.910357298667e+042)=	9.829992061449e+001
    {0x3f817dd39293c01c, 0xc0130d368bca2438, 0,}, 	// 45: log(8.540776167564e-003)=	-4.762903389180e+000
    {0x403242d29b6a0e0c, 0x40073cf790aa581f, 0,}, 	// 46: log(1.826102610912e+001)=	2.904769067954e+000
    {0x3f8283bc9af10a4b, 0xc012d30146d61abc, 0,}, 	// 47: log(9.040330389444e-003)=	-4.706059557741e+000
    {0x3ff6a48820a1737b, 0x3fd6395359fd661b, 0,}, 	// 48: log(1.415168883766e+000)=	3.472488764579e-001
    {0x3eaf4fdba323ecf3, 0xc02bc4f4c20a4501, 0,}, 	// 49: log(9.331686839082e-007)=	-1.388467985511e+001
    {0x40d444438aa9561c, 0x4023e1827ff7d3f1, 0,}, 	// 50: log(2.075305533822e+004)=	9.940448760035e+000
    {0x4002f0a829cf8ec9, 0x3feb942d58aecfa9, 0,}, 	// 51: log(2.367508246085e+000)=	8.618380291068e-001
    {0x4892c0758f727b7a, 0x4057f40861dd0d5a, 0,}, 	// 52: log(4.083779064291e+041)=	9.581301161372e+001
    {0x400161eaa3357260, 0x3fe8d52b53ce442c, 0,}, 	// 53: log(2.172810816830e+000)=	7.760216366606e-001
    {0x3ff295f4214c26b9, 0x3fc32cde585f863a, 0,}, 	// 54: log(1.161609773701e+000)=	1.498067790517e-001
    {0x3ff00a84a73444b7, 0x3f65026752007ef7, 0,}, 	// 55: log(1.002567914144e+000)=	2.564622685909e-003
    {0x44a365a8cffe464b, 0x404a16db813ff11a, 0,}, 	// 56: log(4.580012427333e+022)=	5.217857375738e+001
    {0x3fddaca2588c4f70, 0xbfe8985ef8658fce, 0,}, 	// 57: log(4.636617531516e-001)=	-7.685999728678e-001
    {0x3ff5a59b56a07ec2, 0x3fd3587364605e37, 0,}, 	// 58: log(1.352931345355e+000)=	3.022736053694e-001
    {0x3feb5c7980822ef7, 0xbfb60815524a73e0, 0,}, 	// 59: log(9.175384054119e-001)=	-8.606084116987e-002
    {0x3ff1899b8f21b215, 0x3fb77d37da697289, 0,}, 	// 60: log(1.096095618351e+000)=	9.175442774126e-002
    {0x403d6bd4c60af47d, 0x400b0dc121e0d885, 0,}, 	// 61: log(2.942121541755e+001)=	3.381716026949e+000
    {0x56211ac2ead60dfa, 0x406ec449c2fc432f, 0,}, 	// 62: log(7.845846250823e+106)=	2.461340041091e+002
    {0x3fecd92caf82e997, 0xbfba8b00c02f92d6, 0,}, 	// 63: log(9.015105655629e-001)=	-1.036835164264e-001
    {0x40acdb37f13d812a, 0x40206dc08333bb05, 0,}, 	// 64: log(3.693609262392e+003)=	8.214359378876e+000
    {0x3feceb467de62144, 0xbfb9ea92b0669357, 0,}, 	// 65: log(9.037201365436e-001)=	-1.012355499902e-001
    {0x3fd95cac94860acb, 0xbfed9ec467c54a0b, 0,}, 	// 66: log(3.962813806940e-001)=	-9.256307627459e-001
    {0x3ffc139a976d308a, 0x3fe1febf12bef9d6, 0,}, 	// 67: log(1.754786101827e+000)=	5.623469701894e-001
    {0x406105d67cfaf125, 0x4013a7ee6937ee4c, 0,}, 	// 68: log(1.361824326421e+002)=	4.913995403327e+000
    {0x3f54e96888324406, 0xc01aa7ade3207f62, 0,}, 	// 69: log(1.276352006958e-003)=	-6.663749264582e+000
    {0x411c5324725c4fc9, 0x402a1878e62c9e80, 0,}, 	// 70: log(4.640731116803e+005)=	1.304779738707e+001
    {0x402f3adde80bf3b2, 0x4005fc603094db97, 0,}, 	// 71: log(1.561497426172e+001)=	2.748230342429e+000
    {0x3f6241cc8c7c456a, 0xc0186cea7eb88a70, 0,}, 	// 72: log(2.228641042060e-003)=	-6.106363277448e+000
    {0x3f28058aa1df2f75, 0xc021358725413e82, 0,}, 	// 73: log(1.832706192871e-004)=	-8.604546703543e+000
    {0x43879a9d2bcbd0da, 0x4043f2f8b6563432, 0,}, 	// 74: log(2.126055775893e+017)=	3.989821509561e+001
    {0x400440fe68d0ffab, 0x3fedb996d8444ae8, 0,}, 	// 75: log(2.531735247496e+000)=	9.289049362145e-001
    //added from ancient-libm
    {0x3ff0097d13350953, 0x3f62f4881b43f2d5, 0,},
    {0x0003ec71c47096d5, 0xc0862e6a7c4872d2, 0,},
    {0x000fffffffffffff, 0xc086232bdd7abcd2, 0,},

    {0x3ff1000000000000, 0x3faf0a30c01162a6, 0,}, // 1.0625
    {0x3ff0ffffffffffff, 0x3faf0a30c0116288, 0,}, // 1.0624999999999998
    {0x3fee000000000000, 0xbfb08598b59e3a07, 0,}, // 0.9375
    {0x3fee000000000001, 0xbfb08598b59e39fe, 0,}, // 0.93750000000000011

    {0x3ff199999999999a, 0x3fb8663f793c46cc, 0,},
    {0x3ff1082b577d34ec, 0x3fafffffffffffd3, 0,},
    {0x3ff2216045b6f5cc, 0x3fbffffffffffff2, 0,},
    {0x3c9b4626891a283b, 0xc04272c3d7f0cfea, 0,},  // 9.4625784658987686E-17
    {0x3ea2345689904135, 0xc02cdaa189f4f9f9, 0,},  // 5.4253475234754763E-07
    {0x410ca5f86198d046, 0x4028bb656d0a5205, 0,},  // 234687.04765475
    {0x40f422117627d4d2, 0x4026a3e81ffaa69e, 0,},  // 82465.091346579866
    {0x3ff028f5c28f5c29, 0x3f8460d6ccca367c, 0,},  //1.01
    {0x3ff4000000000000, 0x3fcc8ff7c79a9a22, 0,},  //1.25
    {0x3ff8000000000000, 0x3fd9f323ecbf984c, 0,},  //1.5

#ifdef win64
    {0xbff0000000000000, 0xfff8000000000000, 0,},  //-1.0
#else
    {0xbff0000000000000, 0x7ff8000000000000, 0,},  //-1.0
#endif
    {0xfff8000000000000, 0xfff8000000000000, 0,},  //qnan
    {0xfff4000000000000, 0xfffc000000000000, 0,},  //snan
    {0x7ff0000000000000, 0x7ff0000000000000, 0,},  //+inf
    {0x7ff8000000000000, 0x7ff8000000000000, 0,},  //qnan
    {0x7ff4000000000000, 0x7ffc000000000000, 0,},  //snan

    {0x0000000000000000, 0xfff0000000000000, 0,},  //+0.0
    {0x3ff0f5c28f5c28f6, 0x3fadd56c1d883ee6, 0,},  //1.06
    {0x3fee147ae147ae14, 0xbfafae2206cabe40, 0,},  //.94
    {0x3fefae147ae147ae, 0xbf8495453e6fd4bc, 0,},  //.99
    {0x3fe0000000000000, 0xbfe62e42fefa39ef, 0,},  //.5
    {0x4310005d38118000, 0x4041542740eb8cf2, 0,},  //1.126e+015
    {0x4024000000000000, 0x40026bb1bbb55516, 0,},  //10
    {0x40157ae147ae147b, 0x3ffae4abce14d015, 0,},  //5.37
    {0x3ff02015e8b29697, 0x3f7ff5e7947206c3, 0,},  // 1.0078333940267947 max ulp error
 
    {0x3ff0000000000001, 0x3cafffffffffffff, 0,}

};

/* Test cases to check for exceptions for the logf() routine. These test cases are not exhaustive */
static   libm_test_special_data_f32 test_logf_conformance_data[] = {
    {0x00000000, 0xFF800000, 4,},//log(0) is -inf
    {0x3f800000, 0x00000000, 0,},//1, 0
    {0x80000000, 0xff800000, 4,},//-0, -inf
    {0xbf800000, 0xffc00000, FE_INVALID,},//-1, -nan
    {0x7F800000, 0x7f800000, 0,},//inf, inf
    {0xff800000, 0xffc00000, FE_INVALID,},//-inf, -nan
    {0x7fbfffff, 0x7fffffff, FE_INVALID,},//nan nan
    {0x7fa00000, 0x7fe00000, FE_INVALID,},//snan, nan
    {0xffa00000, 0xffe00000, FE_INVALID,},//-nan, -nan
    {0x7ffe0000, 0x7ffe0000, 0,},//qnan, nan
    //newly added
    {0x00000001, 0xc2ce8ed0, 0,}, // log(1.4013e-045 = smallest) = -103.279
    {0x402df854, 0x3f7fffff, 0,}, // log(2.718282 == M_E) = 1.000000e+000
    {0x7effffff, 0x42b00f34, 0,}, // log(1.70141e+038 = largest) = 8.802969e+001
    {0x3f800000, 0x00000000, 0,}, 	// 2: logf(1.000000000000)=	0.000000000000
    {0x3e9f4f28, 0xbf956fe8, 0,}, 	// 3: logf(0.311150789261)=	-1.167477631377
    {0x408482d1, 0x3fb5e107, 0,}, 	// 4: logf(4.140968799591)=	1.420929770024
    {0x3fd38e86, 0x3f00a169, 0,}, 	// 5: logf(1.652786970139)=	0.502462935845
    {0x3c68127f, 0xc0883971, 0,}, 	// 6: logf(0.014164566062)=	-4.257011780663
    {0x3a9869b8, 0xc0d83898, 0,}, 	// 7: logf(0.001162818633)=	-6.756908365139
    {0x3eefc248, 0xbf42398e, 0,}, 	// 8: logf(0.468279123306)=	-0.758690743530
    {0x4018a53e, 0x3f5e862f, 0,}, 	// 9: logf(2.385085582733)=	0.869235007442
    {0x44ac6d29, 0x40e75758, 0,}, 	// 10: logf(1379.411254882813)=	7.229412060224
    {0x44528b88, 0x40d78d43, 0,}, 	// 11: logf(842.180175781250)=	6.735993976839
    {0x441b6f01, 0x40cdd726, 0,}, 	// 12: logf(621.734436035156)=	6.432513049857
    {0x3ee95bcb, 0xbf4926cf, 0,}, 	// 14: logf(0.455778449774)=	-0.785748443293
    {0x3b8a430f, 0xc0aefa54, 0,}, 	// 15: logf(0.004219419789)=	-5.468057651247
    {0x03be8346, 0xc2a58f59, 0,}, 	// 16: logf(0.000000000000)=	-82.779972616147
    {0x402832a4, 0x3f775caa, 0,}, 	// 17: logf(2.628090858459)=	0.966257673259
    {0x418f0631, 0x40388c72, 0,}, 	// 18: logf(17.878023147583)=	2.883572201417
    {0x0fbb9125, 0xc28451ef, 0,}, 	// 19: logf(0.000000000000)=	-66.160023638302
    {0x3fb60ec4, 0x3eb45fc9, 0,}, 	// 20: logf(1.422325611115)=	0.352293286262
    {0x4224d323, 0x406dfd5a, 0,}, 	// 22: logf(41.206188201904)=	3.718588444152
    {0x3f879033, 0x3d6b24ee, 0,}, 	// 23: logf(1.059088110924)=	0.057408265164
    {0x0e84fa8d, 0xc287c7d1, 0,}, 	// 24: logf(0.000000000000)=	-67.890264888575
    {0x3e13f765, 0xbff79d42, 0,}, 	// 25: logf(0.144498422742)=	-1.934486686770
    {0x3a25cdf5, 0xc0ebb4f6, 0,}, 	// 26: logf(0.000632494048)=	-7.365839748079
    {0x401ad32c, 0x3f622744, 0,}, 	// 27: logf(2.419138908386)=	0.883411653868
    {0x3e41de3b, 0xbfd50795, 0,}, 	// 28: logf(0.189324304461)=	-1.664293837770
    {0x3f14bc52, 0xbf0b0282, 0,}, 	// 29: logf(0.580998539925)=	-0.543007035172
    {0x3f95a51e, 0x3e1ffc32, 0,}, 	// 30: logf(1.169101476669)=	0.156235485112
    {0x0c152eda, 0xc28e7b66, 0,}, 	// 31: logf(0.000000000000)=	-71.241016028053
    {0x6d43b7ad, 0x427e010f, 0,}, 	// 32: logf(3785726706847081400000000000.000000000000)=	63.501035375825
    {0x3a90ba2d, 0xc0d9e078, 0,}, 	// 33: logf(0.001104181283)=	-6.808651138852
    {0x757fe909, 0x4295b816, 0,}, 	// 34: logf(324404837260130500000000000000000.000000000000)=	74.859545023358
    {0x08c539e0, 0xc297a0b3, 0,}, 	// 35: logf(0.000000000000)=	-75.813869469881
    {0x4022325d, 0x3f6e0fb1, 0,}, 	// 36: logf(2.534323930740)=	0.929926907486
    {0x3996d9f8, 0xc10274bd, 0,}, 	// 37: logf(0.000287726289)=	-8.153500916325
    {0x3eee5eba, 0xbf43b64d, 0,}, 	// 38: logf(0.465566456318)=	-0.764500429151
    {0x3ff84c50, 0x3f29a023, 0,}, 	// 39: logf(1.939828872681)=	0.662599759226
    {0x3f7cfccb, 0xbc41f1f5, 0,}, 	// 40: logf(0.988232314587)=	-0.011837472653
    {0x3f6dcb45, 0xbd971617, 0,}, 	// 41: logf(0.928882896900)=	-0.073772600966
    {0x3b78ee67, 0xc0b2577a, 0,}, 	// 42: logf(0.003798389575)=	-5.573178098258
    {0x3f9f69d8, 0x3e60bcfa, 0,}, 	// 43: logf(1.245417594910)=	0.219470891275
    {0x7f800000, 0x7f800000, 0,}, 	// 44: logf(1.#INF00000000)=	1.#INF00000000
    {0x3c0bee9d, 0xc09869b4, 0,}, 	// 45: logf(0.008540776558)=	-4.762903343440
    {0x41921695, 0x4039e7bd, 0,}, 	// 46: logf(18.261026382446)=	2.904769082922
    {0x3c141de5, 0xc096980a, 0,}, 	// 47: logf(0.009040330537)=	-4.706059541456
    {0x3fb52441, 0x3eb1ca9b, 0,}, 	// 48: logf(1.415168881416)=	0.347248874798
    {0x357a7edd, 0xc15e27a6, 0,}, 	// 49: logf(0.000000933169)=	-13.884679861090
    {0x46a2221c, 0x411f0c14, 0,}, 	// 50: logf(20753.054687500000)=	9.940448728679
    {0x40178541, 0x3f5ca16a, 0,}, 	// 51: logf(2.367508172989)=	0.861837998232
    {0x7f800000, 0x7f800000, 0,}, 	// 52: logf(1.#INF00000000)=	1.#INF00000000
    {0x400b0f55, 0x3f46a95a, 0,}, 	// 53: logf(2.172810792923)=	0.776021625658
    {0x3f94afa1, 0x3e1966f2, 0,}, 	// 54: logf(1.161609768867)=	0.149806774891
    {0x3f805425, 0x3b2812c8, 0,}, 	// 55: logf(1.002567887306)=	0.002564595917
    {0x651b2d46, 0x4250b6dc, 0,}, 	// 56: logf(45800122022480912000000.000000000000)=	52.178573708238
    {0x3eed6513, 0xbf44c2f8, 0,}, 	// 57: logf(0.463661760092)=	-0.768599957900
    {0x3fad2cdb, 0x3e9ac39c, 0,}, 	// 58: logf(1.352931380272)=	0.302273631178
    {0x3f6ae3cc, 0xbdb040ab, 0,}, 	// 59: logf(0.917538404465)=	-0.086060842202
    {0x3f8c4cdc, 0x3dbbe9b8, 0,}, 	// 60: logf(1.096095561981)=	0.091754376314
    {0x41eb5ea6, 0x40586e09, 0,}, 	// 61: logf(29.421215057373)=	3.381716014707
    {0x7f800000, 0x7f800000, 0,}, 	// 62: logf(1.#INF00000000)=	1.#INF00000000
    {0x3f66c965, 0xbdd4580a, 0,}, 	// 63: logf(0.901510536671)=	-0.103683548475
    {0x4566d9c0, 0x41036e04, 0,}, 	// 64: logf(3693.609375000000)=	8.214359409364
    {0x3f675a34, 0xbdcf5495, 0,}, 	// 65: logf(0.903720140457)=	-0.101235545660
    {0x3ecae565, 0xbf6cf623, 0,}, 	// 66: logf(0.396281391382)=	-0.925630735775
    {0x3fe09cd5, 0x3f0ff5f9, 0,}, 	// 67: logf(1.754786133766)=	0.562346988390
    {0x43082eb4, 0x409d3f73, 0,}, 	// 68: logf(136.182434082031)=	4.913995413900
    {0x3aa74b44, 0xc0d53d6f, 0,}, 	// 69: logf(0.001276351977)=	-6.663749287944
    {0x48e29924, 0x4150c3c7, 0,}, 	// 70: logf(464073.125000000000)=	13.047797415774
    {0x4179d6ef, 0x402fe301, 0,}, 	// 71: logf(15.614974021912)=	2.748230327071
    {0x3b120e64, 0xc0c36754, 0,}, 	// 72: logf(0.002228640951)=	-6.106363318210
    {0x39402c55, 0xc109ac39, 0,}, 	// 73: logf(0.000183270618)=	-8.604546708188
    {0x5c3cd4e9, 0x421f97c6, 0,}, 	// 74: logf(212605571256287230.000000000000)=	39.898215065820
    {0x402207f3, 0x3f6dccb6, 0,}, 	// 75: logf(2.531735181808)=	0.928904910269
//added from ancient libm repo
    {0x0005fde6, 0xc2b4cbdf , 0,}, // denormal
    {0x007fffff, 0xc2aeac50, 0,}, // largest denormal

    {0x00800000, 0xc2aeac50, 0,}, // smallest normal
    {0x7f7fffff, 0x42b17218, 0,}, // largest normal

    {0x3f880000, 0x3d785186, 0,}, // 1.0625
    {0x3f87ffff, 0x3d785168, 0,}, // 1.06249988
    {0x3f700000, 0xbd842cc6, 0,}, // 0.9375
    {0x3f700001, 0xbd842cbd, 0,}, // 0.93750006
    
    {0x3fc90fdb, 0x3ee735da, 0,},  //pi/2
    {0x3c000000, 0xc09b43d5, 0,},  //0.0078125
    {0x3f012345, 0xbf2f2e21, 0,},  //0.504444
    {0x40000000, 0x3f317218, 0,},  //2
    {0x40490fdb, 0x3f928683, 0,},  //pi
    {0x40c90fdb, 0x3feb3f8e, 0,},  //2pi
    {0x41200000, 0x40135d8e, 0,},  //10
    {0x447a0000, 0x40dd0c55, 0,},  //1000

#ifdef win64
    {0xc2af0000, 0xffc00000, 0,},  //-87.5
    {0xc2e00000, 0xffc00000, 0,},  //-112
    {0xc3000000, 0xffc00000, 0,},  //-128
    {0xc2800000, 0xffc00000, 0,},  //-64
#else
    {0xc2af0000, 0x7fc00000, 0,},  //-87.5
    {0xc2e00000, 0x7fc00000, 0,},  //-112
    {0xc3000000, 0x7fc00000, 0,},  //-128
    {0xc2800000, 0x7fc00000, 0,},  //-64
#endif

    {0x7fc00000, 0x7fc00000, 0,},  //qnan
    {0x7fa00000, 0x7fe00000, 0,},  //snan
    {0xffc00000, 0xffc00000, 0,},  //qnan

    {0x42800000, 0x40851592, 0,},  //64
    {0x42af0000, 0x408f17aa, 0,},  //87.5
    {0x42b00000, 0x408f4658, 0,},  //88
    {0x42c00000, 0x40920f24, 0,},  //96

    {0x402df853, 0x3f7ffffe, 0,},  //e --
    {0x402df855, 0x3f800000, 0,},  //e ++
    {0x3f8100af, 0x3bffaef8, 0,},  //1.0078333940267947 max ulp error

    {0x40400000, 0x3f8c9f54, 0,},  //3
    {0x3f806d67, 0x3b5a70b3, 0,},  //1.00334 max ulp error

    {0x00000201, 0xc2c213ca, 0,},
    {0x7f800001, 0x7fc00001, 0,},
    {0xff800001, 0xffc00001, 0,},
    {0x7fc00000, 0x7fc00000, 0,},
    {0xffc00000, 0xffc00000, 0,},
    {0x7f800000, 0x7f800000, 0,},
    {0xff800000, 0x7fc00000, 0,},
    {0x3f800000, 0x00000000, 0,},
    {0xbf800000, 0x7fc00000, 0,},
    {0x00000000, 0xff800000, 0,},
    {0x80000000, 0xff800000, 0,},

    {0x007fffff, 0xc2aeac50, 0,},
    {0x807fffff, 0x7fc00000, 0,},
    {0x00000001, 0xc2ce8ed0, 0,},
    {0x80000001, 0x7fc00000, 0,},
    {0x7f7fffff, 0x42b17218, 0,},
    {0xff7fffff, 0x7fc00000, 0,},
    {0x00800000, 0xc2aeac50, 0,},
    {0x80800000, 0x7fc00000, 0,},

};

/* Scalar log in AMD LibM handles values between e^(-1/16) and e^(1/16) as special case, while vector versions don't.
   Hence, some values in this range is added as special cases
*/

#endif  /* __TEST_LOG_DATA_H__ */
