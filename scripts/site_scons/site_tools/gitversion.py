import subprocess
import sys

import SCons.Action

__gitversion = None

def get_git_version(env):
    if env.GetOption('help') or env.GetOption('clean'):
        return

    global __gitversion

    if __gitversion:
        return __gitversion

    try:
        #if not conf.CheckProg('git'):
        #    __gitversion = 'unknown'
        #    return

        kw = { 'stdin' : 'devnull',
               'stdout' : subprocess.PIPE,
               'stderr' : subprocess.PIPE,
               'universal_newlines' : True,
        }
        p = SCons.Action._subproc(env, ['git', 'describe', '--dirty= (modified)', '--always'], **kw)
        out,err = p.communicate()
        status = p.wait()
        if err:
            sys.stderr.write(unicode(err))

        if status:
            __gitversion = 'unknown'
        else:
            __gitversion = out.strip()
    finally:
        return __gitversion


# AMD Libm version template

__amd_libm_version_template="""/*
* This file is automatically generated by the build process
* DO NOT EDIT!
*/

static const char VERSION_STRING[] = "%s";

static const char* alm_get_build(void);
static const char* alm_get_build(void)
{
        return VERSION_STRING;
}
"""

def generate_version(env, target):
    """Generate the version file with the current version in it"""
    #print("generate_version", "target:", target, "env:", env)

    version = get_git_version(env)

    contents = __amd_libm_version_template % (version)

    fd = open(target, 'w')
    fd.write(contents)
    fd.close()

    return 0


def generate(env):
    env.AddMethod(generate_version, 'GenerateVersion')


def exists(env):
    return True

