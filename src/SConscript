#
# Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Inherit global environment
Import('env')
from os.path import join as joinpath

installdir = env['prefix']
builddir = joinpath(env['BUILDROOT'], 'src')

e = env.Clone()
e.Append(
    CCFLAGS = ['-Wall', '-W', '-Wstrict-prototypes', '-Werror',
               #'-Wno-unused-but-set-parameter',
               '-Wno-unused-parameter',
               '-fPIC',
               '-mavx2', '-march=znver2'],
    # CPPPATH = [],
    # CCFLAGS = [],
    # LINKFLAGS = [],
    LINKERSCRIPT = 'src/ld-syms-libm.lds',
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1
)

alm_objs = []

almenv = e.Clone()
almenv.Append(
    LINKFLAGS = ['-ealm_main'], # ['-T$LINKERSCRIPT']
    LIBS      = ['c'],
)

subdirs = ['isa', 'optmized', 'iface', 'arch', 'ref']
for d in subdirs:
	denv = almenv.Clone()
	sdir = joinpath(denv['CWD'], d)
	denv.Append(
		CWD = sdir
	)
	alm_objs += SConscript('%s/SConscript'%d,
			    exports = {'env' : denv},
			    duplicate = 0,
                            src_dir = sdir,
                            variant_dir = joinpath(builddir, '%s'%d))

lib_excludes = ['MapEntryPoints.c']
lib_srcs = Glob('*.[c]', exclude=lib_excludes)

alm_objs += almenv.StaticObject(lib_srcs)

libm = almenv.StaticLibrary('alm', alm_objs)
libmso = almenv.SharedLibrary('alm', alm_objs)


almenv.Alias("install", almenv.Install(joinpath(installdir, "lib"), [libmso, libm]))

fast_libm = SConscript('fast/SConscript',
                       exports = {'env' : e},
                       duplicate = 0,
                       src_dir = '#src/fast',
                       variant_dir = joinpath(builddir, 'fast'))

Depends(libmso, '#src/ld-syms-libm.lds')

Return('fast_libm', 'libm', 'libmso')

