# Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
#

# Inherit global environment
Import('env')
from os.path import join as joinpath

builddir = joinpath(env['BUILDROOT'], 'src')

e = env.Clone()
e.Append(
    CCFLAGS = ['-Wall', '-W', '-Wstrict-prototypes', '-Werror',
               #'-Wno-unused-but-set-parameter',
               '-Wno-unused-parameter',
               '-fPIC',
               '-mavx2', '-march=znver2'],
    # CPPPATH = [],
    # CCFLAGS = [],
    # LINKFLAGS = [],
    LINKERSCRIPT = 'src/ld-syms-libm.lds',
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1
)

objs = []

subdirs = ['isa', 'optmized', 'iface', 'arch']
for d in subdirs:
	denv = e.Clone()
	sdir = joinpath(denv['CWD'], d)
	denv.Append(
		CWD = sdir
	)
	objs += SConscript('%s/SConscript'%d,
			    exports = {'env' : denv},
			    duplicate = 0,
                            src_dir = sdir,
                            variant_dir = joinpath(builddir, '%s'%d))

#
# Reference files, for the functions where optimized version
# doesn't exist
#
ref_excludes = ['ref/amd_pow.c', 'ref/exp2.c',
                'ref/exp_tables*.c', 'ref/MapEntryPoints.c', 
                'MapEntryPoints.c']
ref_srcs = Glob('*.[cS]',    exclude=ref_excludes)  + \
	   Glob('ref/*.[c]', exclude=ref_excludes)
ref_objs = e.StaticObject(ref_srcs)
fast_libm = SConscript('fast/SConscript',
                       exports = {'env' : e},
                       duplicate = 0,
                       src_dir = '#src/fast',
                       variant_dir = joinpath(builddir, 'fast'))

#print('lib sources' , list(source))

#objects = e.StaticObject(asm_objs) + optimized_src
objects = ref_objs + objs
#objects = asm_objs + optimized_src

libm = e.StaticLibrary('amdlibm', objects)
libmso = e.SharedLibrary('amdlibm', objects)

#almfastso = e.SharedLibrary('almfast', fast_libm)

Depends(libmso, '#src/ld-syms-libm.lds')
#Return('libm', 'libmso', 'almfastso')
Return('libm', 'libmso', 'fast_libm')

