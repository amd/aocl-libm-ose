# Copyright (C) 2018, AMD. All rights Reserved
#
# Author: Prem Mallappa <pmallapp@amd.com>

# Inherit global environment
Import('env')
from os.path import join as joinpath

builddir = joinpath(env['BUILDROOT'], 'src')

e = env.Clone()
e.Append(
    CCFLAGS = ['-Wall', '-W', '-Wstrict-prototypes', '-Werror',
               #'-Wno-unused-but-set-parameter',
               '-Wno-unused-parameter',
               '-fPIC',
               '-mavx2', '-march=znver2'],
    # CPPPATH = [Dir('./isa/avx2/include')],
    # CCFLAGS = [],
    # LINKFLAGS = ['-T$LINKERSCRIPT'],
     LINKERSCRIPT = 'src/ld-syms-libm.lds',
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1
)

ref_srcs = Glob('./*.[cS]', exclude=['MapEntryPoints.c'])  +\
	Glob('ref/*.[c]', exclude=['ref/amd_pow.c', 'ref/exp2.c',
				   'ref/exp_tables*.c', 'ref/MapEntryPoints.c'])

ref_objs = e.StaticObject(ref_srcs)

asm_objs = SConscript('isa/SConscript',
                           exports = {'env' : e},
                           duplicate = 0,
                           src_dir = '#src/isa',
                           variant_dir = joinpath(builddir, 'isa'))

optimized_src = SConscript('optmized/SConscript',
                           exports = {'env' : e},
                           duplicate = 0,
                           src_dir = '#src/optmized',
                           variant_dir = joinpath(builddir, 'optmized'))

iface_src = SConscript('iface/SConscript',
                           exports = {'env' : e},
                           duplicate = 0,
                           src_dir = '#src/iface',
                           variant_dir = joinpath(builddir, 'iface'))

fast_libm = SConscript('fast/SConscript',
                       exports = {'env' : e},
                       duplicate = 0,
                       src_dir = '#src/fast',
                       variant_dir = joinpath(builddir, 'fast'))

#print('lib sources' , list(source))

#objects = e.StaticObject(asm_objs) + optimized_src
objects = ref_objs + asm_objs + optimized_src + iface_src
#objects = asm_objs + optimized_src

libm = e.StaticLibrary('amdlibm', objects)
libmso = e.SharedLibrary('amdlibm', objects)

#almfastso = e.SharedLibrary('almfast', fast_libm)

Depends(libmso, '#src/ld-syms-libm.lds')
#Return('libm', 'libmso', 'almfastso')
Return('libm', 'libmso', 'fast_libm')

