#
# Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Inherit global environment
Import('env')
from os.path import join as joinpath

e = env.Clone()

# These rearrangements are not value-safe:
#	 (a ⊕ b) ⊕ c ⇒ a ⊕ (b ⊕ c)
#	 a ⊗ (b ⊕ c) ⇒ (a ⊗ b) ⊕ (a ⊕ c)
#
# To Disallow these changes in gcc remove -ffast-math
if '-ffast-math' in e['CFLAGS']:
    e['CFLAGS'].remove('-ffast-math')

e.Append(
    CFLAGS = ['-fPIC']
)

try:
    dbg_mode=env['debug_mode']
except KeyError as err:
    print("Keyerror, debug_mode not found, setting to none", err)
    dbg_mode='none'

if dbg_mode == 'libs' or dbg_mode == 'all':
    e.Append(
        CCFLAGS = ['-g']
       )
    # remove all optimizations on command line
    opt_list=["-O%s"%x for x in range(1, 10)]
    opt_list.append('-Os')
    for opt in opt_list:
        try:
            e['CFLAGS'].remove(opt)
        except ValueError as err:
            pass
else:
    e.Append(
        CCFLAGS = ['-O3'],
    )

experiment_src=[
]

source = Glob('*.c', exclude=experiment_src)
#source = Glob('*.c')

objs = e.StaticObject(source)

Return('objs')
