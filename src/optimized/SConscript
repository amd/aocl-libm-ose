# Copyright (C) 2008-2022 Advanced Micro Devices, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Inherit global environment
Import('env')
from os.path import join as joinpath

builddir = joinpath(env['BUILDROOT'], 'src', 'optimized')

e = env.Clone()
if e['HOST_OS'] != 'win32':
    cflags = ['-O3', '-fPIC', '-mavx2', '-mfma', '-flax-vector-conversions']
else:
    cflags=[]

e.Append(
    CFLAGS = cflags,
)

experiment_src=[
	'expm1f.c',
	]

source = Glob('*.c', exclude=experiment_src)
source += Glob('data/*.c')

vec_objs   = SConscript('vec/SConscript',
                        exports    = {'env' : e},
                        duplicate  = 0,
                        src_dir    = '#src/optimized/vec',
			variant_dir= joinpath(builddir, 'vec'))

cmplx_objs   = SConscript('cmplx/SConscript',
                        exports    = {'env' : e},
                        duplicate  = 0,
                        src_dir    = '#src/optimized/cmplx',
                        variant_dir= joinpath(builddir, 'cmplx'))


objs = e.StaticObject(source) + vec_objs + cmplx_objs

Return('objs')
