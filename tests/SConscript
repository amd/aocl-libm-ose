#
# Copyright (C) 2019 Prem Mallappa.
#
#
# Author: Prem Mallappa<prem.mallappa@gmail.com>
#
import os
from os import path
from os.path import join as joinpath

Import('env')
build_root = joinpath(env['BUILDROOT'], 'tests')

excludes = Glob('*_old.c') + Glob('test_api.c') + Glob('print.c')

# Get all Linux files, excluding the list
linux_files = Glob('*linux.c')

# We first exclude the OS specific files
excludes += linux_files

excluded_list = [f.name for f in excludes]

test_common_srcs = Glob('*.c', exclude=excluded_list)

plat = env['PLATFORM']
#print("platform is", plat)
if plat == 'linux' or plat == 'posix':
    test_common_srcs += linux_files


PROTOTYPE_GLIBC    = 0xf1
PROTOTYPE_AOCL     = 0xf2
PROTOTYPE_AMDLIBM  = 0xf3 #This is to compile for older AMDLIBM versions (prior to v2.1)
PROTOTYPE_TEST_V1  = 0xf8
PROTOTYPE_TEST_V2  = 0xf9

testcflags = ['-funsigned-char', '-fno-strict-aliasing', #'-Og',
                '-fstack-protector-all', '-Werror', '-W', '-Wall',
                '-Wno-multichar' , '-Wno-unused-parameter',
                '-Wno-missing-field-initializers',
                #'-ffast-math',
                # '-ftree-vectorize',
                 '-falign-functions=32',
                #'-falign-loops=32',
                #'-finstrument-functions',
                '-march=native',
                #'-I./include', '-I./tests/include'
	]

ccflags = []
liblist = []
incpath = ['#tests/include', '.', './include']
libpath = []

abi = env['libabi']
#print(abi, env['libabi'])

# Default set to AOCL
if abi == 'aocl':
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_AOCL]
    liblist.extend(['alm'])
elif abi == 'amdlibm':
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_AMDLIBM]
    liblist.extend(['alm'])
elif abi == 'glibc':
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_GLIBC]
    liblist.extend(['mvec'])
elif abi == 'svml':
    pass
else:
    pass

try:
    dbg_mode=env['debug_mode']
except KeyError as err:
    print("Keyerror, debug_mode not found, setting to none", err)
    dbg_mode='none'

if dbg_mode == 'tests' or dbg_mode == 'all':
    env.Append(
        CCFLAGS = ['-ggdb', '-Og']
       )
    # remove all optimizations on command line
    opt_list=["-O%s"%x for x in range(1, 10)]
    opt_list.append('-Os')
    for opt in opt_list:
        try:
            env['CFLAGS'].remove(opt)
        except ValueError as err:
            pass
else:
    env.Append(
        CCFLAGS = ['-O0'],
    )

# Add default math library for any unresolved functions
liblist.extend(['m', 'mparith32', 'mparith64'])
#libpath = ['#build/src', '#build/tests']
#mplibpath = ['src', 'tests', 'tests/libs/mparith/32', 'tests/libs/mparith/64']
mplibpath = ['libs/mparith/32', 'libs/mparith/64']
libpath = [joinpath('#', build_root, x) for x in mplibpath]

libtestenv = env.Clone()
libtestenv.Append(
    CCFLAGS  = ccflags + testcflags,
    CPPPATH  = [incpath],
    VARIANTDIR = 'tests'
)

#print([x.path for x in test_common_srcs])
libtest = libtestenv.StaticLibrary('test', test_common_srcs)

e = env.Clone()
e.Append(
	CFLAGS = ccflags + testcflags,
	INCPATH = incpath,
	CPPPATH = incpath,
	LIBPATH=libpath,
	LIBS = [libtest] + liblist
)

def getSubdirs(abs_path_dir):
    lst = [ name for name in os.listdir(abs_path_dir) if path.isdir(joinpath(abs_path_dir, name)) and name[0] != '.' ]
    lst.sort()
    return lst

# This sconscript file directory
this_sconscript_file = Dir('.').srcnode().abspath
test_base = os.path.dirname(this_sconscript_file)
tests = getSubdirs(this_sconscript_file)
#print("tests=================", tests, path.join(test_base, ))
exclude_dirs = ['include', 'libs']
tests = [x for x in tests if x not in exclude_dirs]

libmp = SConscript('libs/mparith/SConscript',
		exports = {'env': env},
		duplicate = 0,
		src_dir = '#tests/libs/mparith',
		variant_dir = 'libs/mparith',
	)

#print(e.Dump())
#print(tests)
test_exes = []

for test in tests:
    tenv = e.Clone()
    tenv.Append(CPPDEFINES = ['-DTEST_NAME=%s' % test])
    exes = SConscript('%s/SConscript' % test,
                        exports = { 'env': tenv },
                        duplicate = 0,
                        src_dir = '#tests/%s' % test,
                        variant_dir = joinpath(build_root, test)
                        )
    if exes:
       test_exes += exes

Depends(libtest, libmp)
Depends(test_exes, libtest)

Return('libmp', 'test_exes', 'libtest')

