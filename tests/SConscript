# Copyright (C) 2018, AMD. All rights Reserved
#
# Copyright (C) 2018, AMD. All rights Reserved
#
# Author: Prem Mallappa <pmallapp@amd.com>

import os
from os import path
from os.path import join

from scripts.cfg import projpath
builddir = join(projpath.BUILDDIR, 'tests')

Import('env', 'abi')

include = "#tests/include"

PROTOTYPE_GLIBC    = 0xf1
PROTOTYPE_FMA3     = 0xf2
PROTOTYPE_TEST_V1  = 0xf8
PROTOTYPE_TEST_V2  = 0xf9

liblist = []
libpath = []
if abi == 'amdlibm':
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_FMA3]
    liblist.extend(['amdlibm'])
elif abi == 'glibc':
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_GLIBC]
    liblist.extend(['mvec'])
elif abi == 'svml':
    pass
else:
    ccflags = ['-DLIBM_PROTOTYPE=0x%x'%PROTOTYPE_FMA3]
    liblist.extend(['amdlib'])

liblist.extend(['test', 'm'])
libpath = ['#build/src', '#build/tests']

e = env.Clone()
e.Append(
    CCFLAGS  = ccflags + ['-funsigned-char', '-fno-strict-aliasing', #'-Og',
		'-fstack-protector-all', '-Werror', '-W', '-Wall',
		'-Wno-multichar' , '-Wno-unused-parameter',
		'-Wno-missing-field-initializers',
		#'-ffast-math',
		# '-ftree-vectorize',
		 '-falign-functions=32',
		#'-falign-loops=32',
		#'-finstrument-functions',
		'-march=native',
		'-I./include', '-I./tests/include'],
    INCPATH  = [include],
    CPPPATH  = [include],
    LIBS     = liblist,
    LIBPATH  = libpath
)

test_excluded_srcs= ['print.c']

test_common_srcs = Glob('*.c', exclude=test_excluded_srcs)

testlib = e.Library('test', test_common_srcs)

def getSubdirs(abs_path_dir):
    lst = [ name for name in os.listdir(abs_path_dir) if path.isdir(join(abs_path_dir, name)) and name[0] != '.' ]
    lst.sort()
    return lst

# This sconscript file directory
this_sconscript_file = Dir('.').srcnode().abspath
test_base = os.path.dirname(this_sconscript_file)
tests = getSubdirs(this_sconscript_file)
print(tests, path.join(test_base, ))
exclude_dirs = ['include']
tests = [x for x in tests if x not in exclude_dirs]

print(tests)
test_exes = []

for test in tests:
    e.Replace(CPPDEFINES = ['-DTEST_NAME=%s' % test])
    exes = SConscript('%s/SConscript' % test,
			exports = { 'env': e },
			duplicate = 0,
			src_dir = '#tests/%s' % test,
			variant_dir = join(builddir, test)
			)
    test_exes += exes

Depends(test_exes, testlib)

Return('test_exes', 'testlib')

