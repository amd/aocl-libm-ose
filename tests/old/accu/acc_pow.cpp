//#include "../inc/accu/DataTypes.h"
#include "../inc/accu/Buffer.h"
#include "../inc/accu/Timer.h"
//#include "../inc/accu/Constants.h"
#include <math.h>

#define LENGTH_OF(x) (sizeof(x)/sizeof(x[0]))

typedef double  F64;
typedef float   F32;

typedef unsigned long long  U64;
typedef unsigned int        U32;

union Hold64
{
    U64 u64;
    F64 f64;
    long int s64;
};

struct In2Out_64u
{
    U64 in1;
    U64 in2;
    U64 out;
};
typedef union {
  U64 u64;
  F64 f64;
  long int s64;
} doubleword;

const static In2Out_64u ACC_TEST_64_01[] = {

{0x0000001200000000,0x3f847ae147ae147b,0x3f489e75a866e138}, // denormal input for log part
{0x4005bf0a8b145769,0xc086800000000000,0x0000000993b4dc95}, // denormal output for exp part

{0xbfe0000000000000,0x4037000000000000,0xbe80000000000000},
{0xbff15a70e829b0c0,0xc0b2030000000000,0x9e2d7afff2b68a04},
{0xbfee79cc64848b49,0x4096100000000000,0x39b7f5858446b314},
{0x3ff028f5c28f5c29,0x3ddb7cdfd9d7bdbb,0x3ff0000000001181},

    {0x4016666666666666,0xc00c000000000000,0x3f63b64914144c07},
    {0x4016666666666666,0x400c000000000000,0x4079f95539971ed9},
    {0x40236ccccccccccd,0xc010000000000000,0x3f1d757737fe28a1},
    {0xbfe0000000000000,0xc033000000000000,0xc120000000000000},
    {0xc0236ccccccccccd,0xc010000000000000,0x3f1d757737fe28a1},
    {0xbff0000000000000,0xbff0000000000000,0xbff0000000000000},
    {0x3ff0000000000000,0x3ff0000000000000,0x3ff0000000000000},
    {0x3ff0000000000000,0x0000000000000000,0x3ff0000000000000},
    {0x0000000000000000,0x3ff0000000000000,0x0000000000000000},
    {0x3fe0000000000000,0x3fe0000000000000,0x3fe6a09e667f3bcd},
    {0x3fe0000000000000,0xbfe0000000000000,0x3ff6a09e667f3bcd},
    {0x3ff0000000000001,0x408f400000000000,0x3ff00000000003e8},

#ifdef WIN64
    {0x0000000000000000,0x7ff0000000000001,0x7ff0000000000001},
    {0x8000000000000000,0x7ff0000000000001,0x7ff0000000000001},
    {0xbff0000000000000,0x7ff0000000000001,0x7ff0000000000001},
    {0x7ff0000000000000,0x7ff0000000000001,0x7ff0000000000001},
    {0xfff0000000000000,0x7ff0000000000001,0x7ff0000000000001},

    {0x7ff0000000000001,0x3ff0000000000000,0x7ff0000000000001},
    {0x7ff0000000000001,0xbff0000000000000,0x7ff0000000000001},
    {0x7ff0000000000001,0x7ff0000000000000,0x7ff0000000000001},
    {0x7ff0000000000001,0xfff0000000000000,0x7ff0000000000001},
    {0x7ff0000000000001,0x7ff8000000000000,0x7ff0000000000001},
    {0x7ff0000000000001,0x7ff0000000000001,0x7ff0000000000001},

{0xc010000000000000,0x4012cccccccccccd,0xfff8000000000000},
{0xc014000000000000,0x4012cccccccccccd,0xfff8000000000000},
{0xc012cccccccccccd,0x4012cccccccccccd,0xfff8000000000000},
{0x7ff0000000000001,0x4012cccccccccccd,0x7ff0000000000001},

{0xc010000000000000,0xc012cccccccccccd,0xfff8000000000000},
{0xc014000000000000,0xc012cccccccccccd,0xfff8000000000000},
{0xc012cccccccccccd,0xc012cccccccccccd,0xfff8000000000000},
{0x7ff0000000000001,0xc012cccccccccccd,0x7ff0000000000001},

{0xbfb999999999999a,0x3fb999999999999a,0xfff8000000000000},
{0xc400000000000000,0x3fb999999999999a,0xfff8000000000000},

{0xbfb999999999999a,0xbfb999999999999a,0xfff8000000000000},
{0xc400000000000000,0xbfb999999999999a,0xfff8000000000000},

{0xbff0000000000000,0x404189d495182a99,0xfff8000000000000},
{0xbff0000000000000,0xc04189d495182a99,0xfff8000000000000},

   {0xc024000000000000,0x3ff4000000000000,0xfff8000000000000},  // finite -x ^ finite non integer = NaN
   {0xc024000000000000,0xbff4000000000000,0xfff8000000000000},  // finite -x ^ finite non integer = NaN
#else
    {0x0000000000000000,0x7ff0000000000001,0x7ff8000000000001},
    {0x8000000000000000,0x7ff0000000000001,0x7ff8000000000001},
    {0xbff0000000000000,0x7ff0000000000001,0x7ff8000000000001},
    {0x7ff0000000000000,0x7ff0000000000001,0x7ff8000000000001},
    {0xfff0000000000000,0x7ff0000000000001,0x7ff8000000000001},

    {0x7ff0000000000001,0x3ff0000000000000,0x7ff8000000000001},
    {0x7ff0000000000001,0xbff0000000000000,0x7ff8000000000001},
    {0x7ff0000000000001,0x7ff0000000000000,0x7ff8000000000001},
    {0x7ff0000000000001,0xfff0000000000000,0x7ff8000000000001},
    {0x7ff0000000000001,0x7ff8000000000000,0x7ff8000000000001},
    {0x7ff0000000000001,0x7ff0000000000001,0x7ff8000000000001},

{0xc010000000000000,0x4012cccccccccccd,0x7ff8000000000000},
{0xc014000000000000,0x4012cccccccccccd,0x7ff8000000000000},
{0xc012cccccccccccd,0x4012cccccccccccd,0x7ff8000000000000},
{0x7ff0000000000001,0x4012cccccccccccd,0x7ff8000000000001},

{0xc010000000000000,0xc012cccccccccccd,0x7ff8000000000000},
{0xc014000000000000,0xc012cccccccccccd,0x7ff8000000000000},
{0xc012cccccccccccd,0xc012cccccccccccd,0x7ff8000000000000},
{0x7ff0000000000001,0xc012cccccccccccd,0x7ff8000000000001},

{0xbfb999999999999a,0x3fb999999999999a,0x7ff8000000000000},
{0xc400000000000000,0x3fb999999999999a,0x7ff8000000000000},

{0xbfb999999999999a,0xbfb999999999999a,0x7ff8000000000000},
{0xc400000000000000,0xbfb999999999999a,0x7ff8000000000000},

{0xbff0000000000000,0x404189d495182a99,0x7ff8000000000000},
{0xbff0000000000000,0xc04189d495182a99,0x7ff8000000000000},

   {0xc024000000000000,0x3ff4000000000000,0x7ff8000000000000},  // finite -x ^ finite non integer = NaN
   {0xc024000000000000,0xbff4000000000000,0x7ff8000000000000},  // finite -x ^ finite non integer = NaN
#endif

{0x0000000000000000,0x0000000000000000,0x3ff0000000000000},
{0x0000000000000000,0x8000000000000000,0x3ff0000000000000},
{0x0000000000000000,0x3ff0000000000000,0x0000000000000000},
{0x0000000000000000,0xbff0000000000000,0x7ff0000000000000},
{0x0000000000000000,0x7ff0000000000000,0x0000000000000000},
{0x0000000000000000,0xfff0000000000000,0x7ff0000000000000},
{0x0000000000000000,0x7ff8000000000000,0x7ff8000000000000},
//{0x0000000000000000,0x7ff0000000000001,0x7ff8000000000001},

{0x8000000000000000,0x0000000000000000,0x3ff0000000000000},
{0x8000000000000000,0x8000000000000000,0x3ff0000000000000},
{0x8000000000000000,0x3ff0000000000000,0x8000000000000000},
{0x8000000000000000,0xbff0000000000000,0xfff0000000000000},
{0x8000000000000000,0x7ff0000000000000,0x0000000000000000},
{0x8000000000000000,0xfff0000000000000,0x7ff0000000000000},
{0x8000000000000000,0x7ff8000000000000,0x7ff8000000000000},
//{0x8000000000000000,0x7ff0000000000001,0x7ff8000000000001},

{0x3ff0000000000000,0x0000000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0x8000000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0x3ff0000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0xbff0000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0x7ff0000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0xfff0000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0x7ff8000000000000,0x3ff0000000000000},
{0x3ff0000000000000,0x7ff0000000000001,0x3ff0000000000000},

{0xbff0000000000000,0x0000000000000000,0x3ff0000000000000},
{0xbff0000000000000,0x8000000000000000,0x3ff0000000000000},
{0xbff0000000000000,0x3ff0000000000000,0xbff0000000000000},
{0xbff0000000000000,0xbff0000000000000,0xbff0000000000000},
{0xbff0000000000000,0x7ff0000000000000,0x3ff0000000000000},
{0xbff0000000000000,0xfff0000000000000,0x3ff0000000000000},
{0xbff0000000000000,0x7ff8000000000000,0x7ff8000000000000},
//{0xbff0000000000000,0x7ff0000000000001,0x7ff8000000000001},

{0x7ff0000000000000,0x0000000000000000,0x3ff0000000000000},
{0x7ff0000000000000,0x8000000000000000,0x3ff0000000000000},
{0x7ff0000000000000,0x3ff0000000000000,0x7ff0000000000000},
{0x7ff0000000000000,0xbff0000000000000,0x0000000000000000},
{0x7ff0000000000000,0x7ff0000000000000,0x7ff0000000000000},
{0x7ff0000000000000,0xfff0000000000000,0x0000000000000000},
{0x7ff0000000000000,0x7ff8000000000000,0x7ff8000000000000},
//{0x7ff0000000000000,0x7ff0000000000001,0x7ff8000000000001},

{0xfff0000000000000,0x0000000000000000,0x3ff0000000000000},
{0xfff0000000000000,0x8000000000000000,0x3ff0000000000000},
{0xfff0000000000000,0x3ff0000000000000,0xfff0000000000000},
{0xfff0000000000000,0xbff0000000000000,0x8000000000000000},
{0xfff0000000000000,0x7ff0000000000000,0x7ff0000000000000},
{0xfff0000000000000,0xfff0000000000000,0x0000000000000000},
{0xfff0000000000000,0x7ff8000000000000,0x7ff8000000000000},
//{0xfff0000000000000,0x7ff0000000000001,0x7ff8000000000001},

{0x7ff8000000000000,0x0000000000000000,0x3ff0000000000000},
{0x7ff8000000000000,0x8000000000000000,0x3ff0000000000000},
{0x7ff8000000000000,0x3ff0000000000000,0x7ff8000000000000},
{0x7ff8000000000000,0xbff0000000000000,0x7ff8000000000000},
{0x7ff8000000000000,0x7ff0000000000000,0x7ff8000000000000},
{0x7ff8000000000000,0xfff0000000000000,0x7ff8000000000000},
{0x7ff8000000000000,0x7ff8000000000000,0x7ff8000000000000},
{0x7ff8000000000000,0x7ff0000000000001,0x7ff8000000000000},

{0x7ff0000000000001,0x0000000000000000,0x3ff0000000000000},
{0x7ff0000000000001,0x8000000000000000,0x3ff0000000000000},
//{0x7ff0000000000001,0x3ff0000000000000,0x7ff8000000000001},
//{0x7ff0000000000001,0xbff0000000000000,0x7ff8000000000001},
//{0x7ff0000000000001,0x7ff0000000000000,0x7ff8000000000001},
//{0x7ff0000000000001,0xfff0000000000000,0x7ff8000000000001},
//{0x7ff0000000000001,0x7ff8000000000000,0x7ff8000000000001},
//{0x7ff0000000000001,0x7ff0000000000001,0x7ff8000000000001},

//{0xc010000000000000,0x4012cccccccccccd,0x7ff8000000000000},
//{0xc014000000000000,0x4012cccccccccccd,0x7ff8000000000000},
//{0xc012cccccccccccd,0x4012cccccccccccd,0x7ff8000000000000},

{0x7ff0000000000000,0x4012cccccccccccd,0x7ff0000000000000},
{0xfff0000000000000,0x4012cccccccccccd,0x7ff0000000000000},
{0x7ff8000000000000,0x4012cccccccccccd,0x7ff8000000000000},
//{0x7ff0000000000001,0x4012cccccccccccd,0x7ff8000000000001},

//{0xc010000000000000,0xc012cccccccccccd,0x7ff8000000000000},
//{0xc014000000000000,0xc012cccccccccccd,0x7ff8000000000000},
//{0xc012cccccccccccd,0xc012cccccccccccd,0x7ff8000000000000},

{0x7ff0000000000000,0xc012cccccccccccd,0x0000000000000000},
{0xfff0000000000000,0xc012cccccccccccd,0x0000000000000000},
{0x7ff8000000000000,0xc012cccccccccccd,0x7ff8000000000000},
//{0x7ff0000000000001,0xc012cccccccccccd,0x7ff8000000000001},

{0x7ff0000000000000,0x3fb999999999999a,0x7ff0000000000000},
{0xfff0000000000000,0x3fb999999999999a,0x7ff0000000000000},
{0x7ff0000000000000,0xbfb999999999999a,0x0000000000000000},
{0xfff0000000000000,0xbfb999999999999a,0x0000000000000000},
{0x3fb999999999999a,0x7ff0000000000000,0x0000000000000000},
{0xbfb999999999999a,0x7ff0000000000000,0x0000000000000000},
{0x3fb999999999999a,0xfff0000000000000,0x7ff0000000000000},
{0xbfb999999999999a,0xfff0000000000000,0x7ff0000000000000},


//{0xbfb999999999999a,0x3fb999999999999a,0x7ff8000000000000},
//{0xc400000000000000,0x3fb999999999999a,0x7ff8000000000000},

//{0xbfb999999999999a,0xbfb999999999999a,0x7ff8000000000000},
//{0xc400000000000000,0xbfb999999999999a,0x7ff8000000000000},

{0x3fb999999999999a,0x4400000000000000,0x0000000000000000},
{0xbfb999999999999a,0x4400000000000000,0x0000000000000000},
{0x4400000000000000,0x4400000000000000,0x7ff0000000000000},
{0xc400000000000000,0x4400000000000000,0x7ff0000000000000},

{0x3fb999999999999a,0xc400000000000000,0x7ff0000000000000},
{0xbfb999999999999a,0xc400000000000000,0x7ff0000000000000},
{0x4400000000000000,0xc400000000000000,0x0000000000000000},
{0xc400000000000000,0xc400000000000000,0x0000000000000000},

{0x8000000000000000,0x8000000000000000,0x3ff0000000000000},
{0x8000000000000000,0xbff0000000000000,0xfff0000000000000},
{0x8000000000000000,0x404189d495182a99,0x0000000000000000},
{0x8000000000000000,0xc04189d495182a99,0x7ff0000000000000},
{0x8000000000000000,0x4400000000000000,0x0000000000000000},
{0x8000000000000000,0xc400000000000000,0x7ff0000000000000},
{0x8000000000000000,0x4010000000000000,0x0000000000000000},
{0x8000000000000000,0xc010000000000000,0x7ff0000000000000},
{0x8000000000000000,0x4014000000000000,0x8000000000000000},
{0x8000000000000000,0xc014000000000000,0xfff0000000000000},

{0xbff0000000000000,0x8000000000000000,0x3ff0000000000000},
{0xbff0000000000000,0xbff0000000000000,0xbff0000000000000},
//{0xbff0000000000000,0x404189d495182a99,0x7ff8000000000000},
//{0xbff0000000000000,0xc04189d495182a99,0x7ff8000000000000},
{0xbff0000000000000,0x4400000000000000,0x3ff0000000000000},
{0xbff0000000000000,0xc400000000000000,0x3ff0000000000000},
{0xbff0000000000000,0x4010000000000000,0x3ff0000000000000},
{0xbff0000000000000,0xc010000000000000,0x3ff0000000000000},
{0xbff0000000000000,0x4014000000000000,0xbff0000000000000},
{0xbff0000000000000,0xc014000000000000,0xbff0000000000000},

//-----------------------------

{0x0710000000000000,0xfd26f340a5ad4cbf,0x7ff0000000000000},

//-----------------------------

   {0x4080000000000000,0x4080000000000000,0x7ff0000000000000},  //error


   {0x4020f00000000000,0x3ff0000000000000,0x4020f00000000000},  // y == 1

   {0x0000000000000000,0x4400000000000000,0x0000000000000000},  // y is +large, x == 0
   {0x3fe0000000000000,0x7ff0000000000000,0x0000000000000000},  // y ==+inf ,   x < 1
   {0x3fe0000000000000,0x4400000000000000,0x0000000000000000},  // y is +large, x < 1
   {0xbff0000000000000,0x7ff0000000000000,0x3ff0000000000000},  // y ==+inf, x == -1
   {0xbff0000000000000,0x4400000000000000,0x3ff0000000000000},  // y is +large, x == -1
   {0x4008000000000000,0x4400000000000000,0x7ff0000000000000},  // y is +large, |x| > 1
   {0x4008000000000000,0x7ff0000000000000,0x7ff0000000000000},  // y ==+inf, |x| > 1
   {0xc008000000000000,0x4400000000000000,0x7ff0000000000000},  // y is +large, |x| > 1
   {0x4020f00000000000,0x7ff0000000000000,0x7ff0000000000000},  // y ==+inf
   {0x4020f00000000000,0x4400000000000000,0x7ff0000000000000},  // y is large
   {0x0000000000000000,0xc400000000000000,0x7ff0000000000000},  // y is -large, |x| ==0
   {0x8000000000000000,0xfff0000000000000,0x7ff0000000000000},  // y ==-inf, |x| == 0
   {0x3fe0000000000000,0xc400000000000000,0x7ff0000000000000},  // y is -large, x < 1
   {0x3fe0000000000000,0xfff0000000000000,0x7ff0000000000000},  // y ==-inf, x < 1
   {0x3ff0000000000000,0xc400000000000000,0x3ff0000000000000},  // y is -large, x == 1
   {0x4000000000000000,0xc400000000000000,0x0000000000000000},  // y is -large, x > 1

   {0x4024000000000000,0xc073800000000000,0x0000002f201d49fb},  //denormal
   {0xc024000000000000,0xc073900000000000,0x80000004b6695433},  //negative denormal
   {0x4024000000000000,0xc080000000000000,0x0000000000000000},  //complete underflow
   {0x4020000000000000,0x40e0000000000000,0x7ff0000000000000},  //overflow
   {0x4024000000000000,0x3a00000000000000,0x3ff0000000000000},  //y is very small
   {0xc024000000000000,0xc080080000000000,0x8000000000000000},  //complete underflow
   {0xc080000000000000,0x4060200000000000,0xfff0000000000000},  //overflow

   {0x0000000000000000,0xc008000000000000,0x7ff0000000000000},  //+0 ^ -odd integer       = +inf
   {0x8000000000000000,0xc008000000000000,0xfff0000000000000},  //-0 ^ -odd integer       = -inf

   {0x0000000000000000,0xc010000000000000,0x7ff0000000000000},  //+0 ^ -not odd integer   = +inf
   {0x8000000000000000,0xc001000000000000,0x7ff0000000000000},  //-0 ^ -not odd integer   = +inf

   {0x0000000000000000,0x4008000000000000,0x0000000000000000},  //+0 ^ +odd integer       = +0
   {0x8000000000000000,0x4008000000000000,0x8000000000000000},  //-0 ^ +odd integer       = -0

   {0x0000000000000000,0x4010000000000000,0x0000000000000000},  //+0 ^ +not odd integer   = +0
   {0x8000000000000000,0x4001000000000000,0x0000000000000000},  //-0 ^ +not odd integer   = +0

   {0xbFF0000000000000,0x7ff0000000000000,0x3FF0000000000000},  //-1 ^ +Inf               = +1
   {0xbFF0000000000000,0xfff0000000000000,0x3FF0000000000000},  //-1 ^ -Inf               = +1

   {0x3FF0000000000000,0x7ff8000000000000,0x3FF0000000000000},  //+1 ^ NaN   +1^y = +1 for ALL y, even NaN
   {0x3FF0000000000000,0xfff8000000000000,0x3FF0000000000000},  //+1 ^ NaN   +1^y = +1 for ALL y, even NaN
   {0x3FF0000000000000,0x7ff0000000000000,0x3FF0000000000000},  //+1 ^ +Inf               = +1
   {0x3FF0000000000000,0xfff0000000000000,0x3FF0000000000000},  //+1 ^ -Inf               = +1

   {0x4000000000000000,0x0000000000000000,0x3FF0000000000000},  //any x ^ +0              = +1
   {0x4000000000000000,0x8000000000000000,0x3FF0000000000000},  //any x ^ -0              = +1
   {0x7ff0000000000000,0x0000000000000000,0x3FF0000000000000},  //any x ^ +0              = +1
   {0xfff0000000000000,0x8000000000000000,0x3FF0000000000000},  //any x ^ -0              = +1
   {0x7ff8000000000000,0x0000000000000000,0x3FF0000000000000},  //any x ^ +0              = +1  even NaN
   {0xfff8000000000000,0x8000000000000000,0x3FF0000000000000},  //any x ^ -0              = +1  even NaN

   //{0xc024000000000000,0x3ff4000000000000,0x7ff8000000000000},  // finite -x ^ finite non integer = NaN
   //{0xc024000000000000,0xbff4000000000000,0x7ff8000000000000},  // finite -x ^ finite non integer = NaN

   {0x3fe8000000000000,0xfff0000000000000,0x7ff0000000000000},  // |x|<1 ^ -inf       = +inf
   {0xbfe8000000000000,0xfff0000000000000,0x7ff0000000000000},  // |x|<1 ^ -inf       = +inf

   {0x4024000000000000,0xfff0000000000000,0x0000000000000000},  // |x|>1 ^ -inf       = +0
   {0xc024c00000000000,0xfff0000000000000,0x0000000000000000},  // |x|>1 ^ -inf       = +0

   {0x3fe8000000000000,0x7ff0000000000000,0x0000000000000000},  // |x|<1 ^ +inf       = +0
   {0xbfe8000000000000,0x7ff0000000000000,0x0000000000000000},  // |x|<1 ^ +inf       = +0

   {0x4024000000000000,0x7ff0000000000000,0x7ff0000000000000},  // |x|>1 ^ +inf       = +inf
   {0xc024c00000000000,0x7ff0000000000000,0x7ff0000000000000},  // |x|>1 ^ +inf       = +inf

   {0xfff0000000000000,0xc008000000000000,0x8000000000000000},  // -inf ^ -odd integer = -0

   {0xfff0000000000000,0xc010000000000000,0x0000000000000000},  // -inf ^ - not odd integer = +0
   {0xfff0000000000000,0xc001000000000000,0x0000000000000000},  // -inf ^ - not odd integer = +0

   {0xfff0000000000000,0x4008000000000000,0xfff0000000000000},  // -inf ^ +odd integer = -inf

   {0xfff0000000000000,0x4010000000000000,0x7ff0000000000000},  // -inf ^ +not odd integer = +inf
   {0xfff0000000000000,0x401e000000000000,0x7ff0000000000000},  // -inf ^ +not odd integer = +inf

   {0x7ff0000000000000,0xc008000000000000,0x0000000000000000},  // +inf ^ y<0 = +0
   {0x7ff0000000000000,0xc010000000000000,0x0000000000000000},  // +inf ^ y<0 = +0
   {0x7ff0000000000000,0xc001000000000000,0x0000000000000000},  // +inf ^ y<0 = +0

   {0x7ff0000000000000,0x4008000000000000,0x7ff0000000000000},  // +inf ^ y<0 = +inf
   {0x7ff0000000000000,0x4010000000000000,0x7ff0000000000000},  // +inf ^ y<0 = +inf
   {0x7ff0000000000000,0x4001000000000000,0x7ff0000000000000},  // +inf ^ y<0 = +inf

   {0xc080000000000000,0x4060200000000000,0xfff0000000000000},  //overflow
   {0x4024000000000000,0xc073800000000000,0x0000002f201d49fb},  //denormal
   {0x3FE62E42FEFA39EF,0x3FE62E42FEFA39EF,0x3FE8D22A83215142},  //1/e,1/e
   {0x3F7357915F4A462D,0x403F96C837AE808A,0x30AE8C4E628AE98B},  //0.0047221830942745626,31.5889925766974
   {0xc008000000000000,0x4040000000000000,0x431A553F8878FA04},  //-3^32

    };
    
extern "C" double S_DP_POW(double, double);
 
void acc_fastpow()
{
    const In2Out_64u *pTest = ACC_TEST_64_01;

    std::cout << std::endl;
    std::cout << "Running: ";
    doubleword doublex,doubley,doublez,result;
    for(size_t k=0; k<LENGTH_OF(ACC_TEST_64_01); k++)
    {
        Hold64 v_x;
        Hold64 v_y;
        Hold64 v_z;

        v_x.u64 = pTest[k].in1;
        v_y.u64 = pTest[k].in2;
        result.f64 = pow(v_x.f64, v_y.f64);
         doublez.u64 = pTest[k].out;
        bool fail = false;
        
        if(result.u64 != pTest[k].out && !(isnan(result.f64) && isnan(doublez.f64))) fail = true;

        if(fail)
        {
         //   std::cout << "Failure: " << "(" << std::hex << v_x.u64 << "," << v_y.u64 << ")" << " , Expected: " <<
      //          pTest[k].out << ", Actual: " << v_z.u64 << std::endl;
            doublex.u64 = v_x.u64;
            doubley.u64 = v_y.u64;
            doublez.u64 = pTest[k].out;
        //    result.word=v_z.u64;
            std::cout << "TEST CASE "<<k<<" X="<<doublex.f64<<" Y="<<doubley.f64<<" ACTUAL="<<result.f64<<" EXPECTED="<<doublez.f64<<
          " STATUS:FAILED"<<std::endl;
            std::cout<<" X="<<std::hex<<doublex.f64<<" Y="<<std::hex<<doubley.f64<<" ACTUAL="<<std::hex<<result.f64<<" EXPECTED="<<std::hex<<doublez.f64<<std::endl;
            //std::cout << "Failure: " << std::dec << k << " , Expected: " << std::hex << 
                //pTest[k].out << ", Actual: " << v_z.u64 << std::endl;
        }
        else
        {
   //         doublex.word = v_x.u64;
 //           doubley.word = v_y.u64;
  //          doublez.word = pTest[k].out;
 //           result.word=v_z.u64;
    //        std::cout << "TEST CASE "<<k<<" X="<<doublex.value<<" Y="<<doubley.value<<" ACTUAL="<<result.value<<" EXPECTED="<<doublez.value<<" STATUS:PASSED"<<std::endl;
        }
    }
    std::cout << " Finished " << std::endl;
}

int main()
{
    acc_fastpow();
    return 0;
}

