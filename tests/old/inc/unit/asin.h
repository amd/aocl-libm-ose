//R.obtained=FN_PROTOTYPE(asin)(P1.input)
//double,double,ExcFlags
//P1 R E
//unsigned long long int|double, unsigned  long long int|double,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_asin(P1.V3[j])
//double double ExcFlags
//ULP amd_ref_asin_ULP(P1.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{

    {0x0000000000000001LL, 0x0000000000000001LL, EXC_CHK_UNFL}, // denormal min
    {0x0005fde623545abcLL, 0x0005fde623545abcLL, EXC_CHK_UNFL}, // denormal intermediate
    {0x000FFFFFFFFFFFFFLL, 0x000fffffffffffffLL, EXC_CHK_UNFL}, // denormal max
    {0x8000000000000001LL, 0x8000000000000001LL, EXC_CHK_UNFL}, // -denormal min
    {0x8002344ade5def12LL, 0x8002344ade5def12LL, EXC_CHK_UNFL}, // -denormal intermediate
    {0x800FFFFFFFFFFFFFLL, 0x800fffffffffffffLL, EXC_CHK_UNFL}, // -denormal max
    {0x0010000000000000LL, 0x0010000000000000LL, EXC_CHK_UNFL}, // normal min
    {0x43b3c4eafedcab02LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // normal intermediate
    {0x7FEFFFFFFFFFFFFFLL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // normal max
    {0x8010000000000000LL, 0x8010000000000000LL, EXC_CHK_UNFL}, // -normal min
    {0xc5812e71245acfdbLL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -normal intermediate
    {0xFFEFFFFFFFFFFFFFLL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -normal max															
    {0x7FF0000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // inf
    {0xFFF0000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -inf
    {0x7FF8000000000000LL, 0x7ff8000000000000LL, EXC_CHK_NONE}, // qnan min
    {0x7FFe1a5701234dc3LL, 0x7ffe1a5701234dc3LL, EXC_CHK_NONE}, // qnan intermediate
    {0x7FFFFFFFFFFFFFFFLL, 0x7fffffffffffffffLL, EXC_CHK_NONE}, // qnan max
    {0xFFF8000000000000LL, 0xfff8000000000000LL, EXC_CHK_NONE}, // indeterninate
    {0xFFF8000000000001LL, 0xfff8000000000001LL, EXC_CHK_NONE}, // -qnan min
    {0xFFF9123425dcba31LL, 0xfff9123425dcba31LL, EXC_CHK_NONE}, // -qnan intermediate
    {0xFFFFFFFFFFFFFFFFLL, 0xffffffffffffffffLL, EXC_CHK_NONE}, // -qnan max															
    {0x7FF0000000000001LL, 0x7ff8000000000001LL, EXC_CHK_INVL}, // snan min
    {0x7FF5344752a0bd90LL, 0x7ffd344752a0bd90LL, EXC_CHK_INVL}, // snan intermediate
    {0x7FF7FFFFFFFFFFFFLL, 0x7fffffffffffffffLL, EXC_CHK_INVL}, // snan max
    {0xFFF0000000000001LL, 0xfff8000000000001LL, EXC_CHK_INVL}, // -snan min
    {0xfFF432438995fffaLL, 0xfffc32438995fffaLL, EXC_CHK_INVL}, // -snan intermediate
    {0xFFF7FFFFFFFFFFFFLL, 0xffffffffffffffffLL, EXC_CHK_INVL}, // -snan max															
    {0x3FF921FB54442D18LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // pi/2
    {0x400921FB54442D18LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // pi
    {0x401921FB54442D18LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 2pi
    {0x3FFB7E151628AED3LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // e --
    {0x4005BF0A8B145769LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // e
    {0x400DBF0A8B145769LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // e ++															
    {0x0000000000000000LL, 0x0000000000000000LL, EXC_CHK_NONE}, // 0
    {0x3C4536B8B14B676CLL, 0x3c4536b8b14b676cLL, EXC_CHK_UNFL}, // 0.0000000000000000023
    {0x3FDFFFFBCE4217D3LL, 0x3fe0c14fcc40ab8cLL, EXC_CHK_NONE}, // 0.4999989999999999999
    {0x3FE000000000006CLL, 0x3fe0c152382d73e2LL, EXC_CHK_NONE}, // 0.500000000000012
    {0x8000000000000000LL, 0x8000000000000000LL, EXC_CHK_NONE}, // -0
    {0xBBDB2752CE74FF42LL, 0xbbdb2752ce74ff42LL, EXC_CHK_UNFL}, // -0.000000000000000000023
    {0xBFDFFFFBCE4217D3LL, 0xbfe0c14fcc40ab8cLL, EXC_CHK_NONE}, // -0.4999989999999999999
    {0xBFE000000000006CLL, 0xbfe0c152382d73e2LL, EXC_CHK_NONE}, // -0.500000000000012
    {0x3FF0000000000000LL, 0x3ff921fb54442d18LL, EXC_CHK_NONE}, // 1
    {0x3FEFFFFFC49BD0DCLL, 0x3ff9200e1bb0fd86LL, EXC_CHK_NONE}, // 0.9999998893750006
    {0x3FF0000000000119LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 1.0000000000000624998
    {0x3FF7FFFEF39085F4LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 1.499998999999999967
    {0x3FF8000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 1.50000000000000012
    {0xBFF0000000000000LL, 0xbff921fb54442d18LL, EXC_CHK_NONE}, // -1
    {0xBFEFFFFFC49BD0DCLL, 0xbff9200e1bb0fd86LL, EXC_CHK_NONE}, // -0.9999998893750006
    {0xBFF0000000000119LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -1.0000000000000624998
    {0xBFF7FFFEF39085F4LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -1.499998999999999967
    {0xBFF8000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -1.50000000000000012															
    {0x4000000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 2
    {0xC000000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -2
    {0x4024000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 10
    {0xC024000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -10
    {0x408F400000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 1000
    {0xC08F400000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -1000
    {0x4050D9999999999ALL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 67.4
    {0xC050D9999999999ALL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -67.4
    {0x409EFE6666666666LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 1983.6
    {0xC09EFE6666666666LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -1983.6
    {0x4055E00000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 87.5
    {0xC055E00000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -87.5
    {0x41002BC800000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 132473 
    {0xC1002BC800000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -132473
    {0x4330000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 2^52
    {0x4330000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 2^52 + 1 
    {0x432FFFFFFFFFFFFFLL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // 2^52 -1 + 0.5
    {0xC330000000000000LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -2^52
    {0xC330000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -(2^52 + 1) 
    {0xC32FFFFFFFFFFFFFLL, 0x7ff8000000000000LL, EXC_CHK_INVL}, // -(2^52 -1 + 0.5)
  	
    // special accuracy tests	
    {0x3ff0000000000000LL, 0x3ff921fb54442d18LL, EXC_CHK_NONE},  // 
    {0x3ff0000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL},	 //
	{0x3fefffffffffffffLL, 0x3ff921fb50442d18LL, EXC_CHK_NONE},	 //
	{0xbff0000000000000LL, 0xbff921fb54442d18LL, EXC_CHK_NONE},	 //
	{0xbff0000000000001LL, 0x7ff8000000000000LL, EXC_CHK_INVL},	 //
	{0xbfefffffffffffffLL, 0xbff921fb50442d18LL, EXC_CHK_NONE},	 //
    {0x3e30000000000000LL, 0x3e30000000000000LL, EXC_CHK_NONE},	 //
	{0x3e30000000000001LL, 0x3e30000000000001LL, EXC_CHK_NONE},	 //
	{0x3e2fffffffffffffLL, 0x3e2fffffffffffffLL, EXC_CHK_UNFL},	 //
    {0xbe30000000000000LL, 0xbe30000000000000LL, EXC_CHK_NONE},	 //
	{0xbe30000000000001LL, 0xbe30000000000001LL, EXC_CHK_NONE},	 //
	{0xbe2fffffffffffffLL, 0xbe2fffffffffffffLL, EXC_CHK_UNFL},	 //
    {0x0000000000000000LL, 0x0000000000000000LL, EXC_CHK_NONE},	 //
	{0x8000000000000000LL, 0x8000000000000000LL, EXC_CHK_NONE},	 //
    {0x3fe0000000000000LL, 0x3fe0c152382d7366LL, EXC_CHK_NONE},	 //
	{0x3fe0000000000001LL, 0x3fe0c152382d7367LL, EXC_CHK_NONE},  //
	{0x3fdfffffffffffffLL, 0x3fe0c152382d7365LL, EXC_CHK_NONE},  //
	{0xbff0000000000000LL, 0xbff921fb54442d18LL, EXC_CHK_NONE},  // 
    {0xbfefe4b385b43bf8LL, 0xbff7d38017ddb224LL, EXC_CHK_NONE},	 //
	{0xbfefae1aaddd508cLL, 0xbff6de52688898e3LL, EXC_CHK_NONE},	 //
	{0xbfef5c35787b3dbcLL, 0xbff5ed88753fc0fbLL, EXC_CHK_NONE},	 //
	{0xbfeeef03e58e0387LL, 0xbff4fd995af60aeaLL, EXC_CHK_NONE},	 //
	{0xbfee6685f515a1eeLL, 0xbff40d739ed19801LL, EXC_CHK_NONE},	 //
    {0xbfedc2bba71218f1LL, 0xbff31c8ce645aeecLL, EXC_CHK_NONE},	 //
	{0xbfed03a4fb836890LL, 0xbff22a851e10352aLL, EXC_CHK_NONE},	 //
	{0xbfec2941f26990caLL, 0xbff1370b7d55de1bLL, EXC_CHK_NONE},	 //
    {0xbfeb33928bc491a0LL, 0xbff041d44cd5d1daLL, EXC_CHK_NONE},	 //
	{0xbfea2296c7946b12LL, 0xbfee95283c416efcLL, EXC_CHK_NONE},	 //
	{0xbfe8f64ea5d91d20LL, 0xbfeca1fa158d29f0LL, EXC_CHK_NONE},	 //
    {0xbfe7aeba2692a7c9LL, 0xbfeaa9797ecfc8adLL, EXC_CHK_NONE},	 //
	{0xbfe64bd949c10b0eLL, 0xbfe8aaf5984c2cfcLL, EXC_CHK_NONE},	 //
    {0xbfe4cdac0f6446efLL, 0xbfe6a5adec4a1b13LL, EXC_CHK_NONE},	 //
	{0xbfe33432777c5b6cLL, 0xbfe498cebd2b6b60LL, EXC_CHK_NONE},  //
	{0xbfe17f6c82094884LL, 0xbfe2836cb63d28faLL, EXC_CHK_NONE},  //
	{0xbfdf5eb45e161c70LL, 0xbfe0647fb35fa85cLL, EXC_CHK_NONE},  // 
    {0xbfdb87f6fd035910LL, 0xbfdc75b885525500LL, EXC_CHK_NONE},	 //
	{0xbfd77aa0e0da46e7LL, 0xbfd80a56c81cfa21LL, EXC_CHK_NONE},	 //
	{0xbfd336b2099ae5f6LL, 0xbfd383bfb1f2aa08LL, EXC_CHK_NONE},	 //
	{0xbfcd7854ee8a6c78LL, 0xbfcdbca019d79af7LL, EXC_CHK_NONE},	 //
	{0xbfc4161453b26f74LL, 0xbfc42b6bb78bf784LL, EXC_CHK_NONE},	 //
    {0xbfb48d44855ba9bdLL, 0xbfb492ef81418121LL, EXC_CHK_NONE},	 //
	{0xbf33fd76f9397000LL, 0xbf33fd76fe6cca8cLL, EXC_CHK_NONE},	 //
	{0x3fb53fac83c271ffLL, 0x3fb545f07d197b9fLL, EXC_CHK_NONE},	 //
    {0x3fc5b6dcb56bac48LL, 0x3fc5d1e056bd87abLL, EXC_CHK_NONE},	 //
	{0x3fd09d8a4f915e91LL, 0x3fd0ced4ffa67c47LL, EXC_CHK_NONE},	 //
	{0x3fd6963eff8335c6LL, 0x3fd7158d310cdeb7LL, EXC_CHK_NONE},	 //
    {0x3fdcc58c6a8b5bc4LL, 0x3fddd75d3cbd6ff9LL, EXC_CHK_NONE},	 //
	{0x3fe195b94854e845LL, 0x3fe29e1660baa93fLL, EXC_CHK_NONE},	 //
    {0x3fe4e3f8b8ef4a0cLL, 0x3fe6c3126fd7d1c8LL, EXC_CHK_NONE},	 //
	{0x3fe84d848714d338LL, 0x3feb997d9f9deaaeLL, EXC_CHK_NONE},  //
	{0x3febd25cb2c583c8LL, 0x3ff0dd5ea60e9ba6LL, EXC_CHK_NONE},  //
    {0x3fef72813c015bbcLL, 0x3ff627972cc1a7deLL, EXC_CHK_NONE},  //

  //special exception checks
  {F64_POS_ZERO, F64_POS_ZERO, EXC_CHK_NONE },  //	
  {F64_NEG_ZERO, F64_NEG_ZERO, EXC_CHK_NONE },  //	
  {F64_POS_HNORMAL,F64_POS_QNAN,EXC_CHK_INVL},
  {F64_NEG_HNORMAL,F64_POS_QNAN,EXC_CHK_INVL},
  {F64_POS_SNAN, F64_POS_QNAN,EXC_CHK_INVL },  //
  {F64_NEG_SNAN, F64_NEG_QNAN,EXC_CHK_INVL },  //
  {F64_POS_INF, 0x7FF8000000000000LL,EXC_CHK_INVL },  //
  {F64_NEG_INF, 0x7FF8000000000000LL,EXC_CHK_INVL },  //
  {F64_POS_QNAN, F64_POS_QNAN,EXC_CHK_NONE },  //
  {F64_NEG_QNAN, F64_NEG_QNAN,EXC_CHK_NONE },  //
  {0x4000000000000000LL, F64_POS_QNAN,EXC_CHK_INVL},  // input 2
  {F64_POS_LDENORM,F64_POS_LDENORM,EXC_CHK_UNFL},
  {F64_NEG_LDENORM,F64_NEG_LDENORM,EXC_CHK_UNFL},
  {F64_POS_HDENORM,F64_POS_HDENORM,EXC_CHK_UNFL},
  {F64_NEG_HDENORM,F64_NEG_HDENORM,EXC_CHK_UNFL},

};

