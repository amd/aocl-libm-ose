//R.obtained=FN_PROTOTYPE(exp)(P1.input)
//double,double,ExcFlags
//P1 R E
//unsigned long long int|double, unsigned  long long int|double,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_exp(P1.V3[j])
//double double ExcFlags
//ULP amd_ref_exp_ULP(P1.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{
    { F64_POS_SNAN , F64_POS_SNAN_Q ,EXC_CHK_INVL},
    { F64_NEG_SNAN , F64_NEG_SNAN_Q ,EXC_CHK_INVL},
    { F64_POS_QNAN , F64_POS_QNAN   ,EXC_CHK_NONE},
    { F64_NEG_QNAN , F64_NEG_QNAN   ,EXC_CHK_NONE},
    { F64_POS_INF  , F64_POS_INF    ,EXC_CHK_NONE},
    { F64_NEG_INF  , F64_POS_ZERO   ,EXC_CHK_NONE},
    { F64_POS_ONE  , 0x4005bf0a8b145769LL ,EXC_CHK_NONE},
    { F64_NEG_ONE  , 0x3fd78b56362cef38LL,EXC_CHK_NONE},
    { F64_POS_ZERO , F64_POS_ONE    ,EXC_CHK_NONE},
    { F64_NEG_ZERO , F64_POS_ONE    ,EXC_CHK_NONE},
    { F64_POS_HDENORM, F64_POS_ONE  ,EXC_CHK_NONE},
    { F64_NEG_HDENORM, F64_POS_ONE  ,EXC_CHK_NONE},
    { F64_POS_LDENORM, F64_POS_ONE  ,EXC_CHK_NONE},
    { F64_NEG_LDENORM, F64_POS_ONE  ,EXC_CHK_NONE},
    { F64_POS_HNORMAL, F64_POS_INF  ,EXC_CHK_OVFL},
    { F64_NEG_HNORMAL, F64_POS_ZERO ,EXC_CHK_UNFL},
    { F64_POS_LNORMAL, F64_POS_ONE  ,EXC_CHK_NONE},
    { F64_NEG_LNORMAL, F64_POS_ONE  ,EXC_CHK_NONE},    
    { F64_POS_PIBY2,0x40133dedd672084dLL,EXC_CHK_NONE},  //pi/2
   {0x3EE0624DD2F1A9FCLL,0x3ff0000831290258LL,EXC_CHK_NONE},  //0.0000078125
   {0x3EF0624DC31C6CA1LL,0x3ff000106256269bLL,EXC_CHK_NONE},  //0.0000156249991
   {0x3FE02467BE553AC5LL,0x3ffa7f3d7b3b3b7dLL,EXC_CHK_NONE},  //0.504444
   {0x3FF0000000000000LL,0x4005bf0a8b145769LL,EXC_CHK_NONE},  //1
   {0x4000000000000000LL,0x401d8e64b8d4ddaeLL,EXC_CHK_NONE},  //2
   {0x3D3C25C268497682LL,0x3ff00000000001c2LL,EXC_CHK_NONE},  //1.0000000e-13
   {F64_POS_PI,          0x4037240490a16562LL,EXC_CHK_NONE},  //pi
   {0x401921FB54442D18LL,0x4080bbeee9177e18LL,EXC_CHK_NONE},  //2pi
   {0x4024000000000000LL,0x40d5829dcf950560LL,EXC_CHK_NONE},  //10
   {0x408F400000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //1000
   {0x4060000000000000LL,0x4b795e54c5dd4218LL,EXC_CHK_NONE},  //128
   {0x4086240000000000LL,0x7fd1bf058bc994adLL,EXC_CHK_NONE},  //708.5
   {0x4086280000000000LL,0x7fdd422d2be5dc9bLL,EXC_CHK_NONE},  //709
   {0x408C000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //896
   {0xC086240000000000LL,0x000e6cf6d08897acLL,EXC_CHK_UNFL},  //-708.5
   {0xC089600000000000LL,0x0000000000000000LL,EXC_CHK_UNFL},  //-812
   {0xC070000000000000LL,0x28d9755956ad4e9cLL,EXC_CHK_NONE},  //-256
   {0xc086232bdd7abcd2LL,0x001000000000007cLL,EXC_CHK_NONE},  // -708.3964185322641 smallest normal result
   {0xc086232bdd7abcd3LL,0x000ffffffffffe7cLL,EXC_CHK_UNFL},  // -708.3964185322642 largest denormal result
   {0xC087480000000000LL,0x0000000000000001LL,EXC_CHK_UNFL},  //-745
   {0x40862e42fefa39eeLL,0x7feffffffffffb2aLL,EXC_CHK_NONE},  //7.09782712893383973096e+02   largest value  --
   {0x40862e42fefa39efLL,0x7fefffffffffff2aLL,EXC_CHK_NONE},  //7.09782712893383973096e+02   largest value
   {0x40862e42fefa39ffLL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //7.09782712893383973096e+02   overflow
   {0x4200000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //large   overflow
   {0xC05021EB851EB852LL,0x3a1deaba44085e3fLL,EXC_CHK_NONE}, // -64.53
   {0xC0FF5D35B020C49CLL,0x0000000000000000LL,EXC_CHK_UNFL}, // -128467.3555
   {0xBFD3333333333333LL,0x3fe7b4c869c37c05LL,EXC_CHK_NONE}, // -0.3
   {0xBFE48E410B630A91LL,0x3fe0d560349d3118LL,EXC_CHK_NONE}, // -0.642365
   {0xBFE0000000000000LL,0x3fe368b2fc6f960aLL,EXC_CHK_NONE}, // -0.5
   {0x3FD3333333333333LL,0x3ff599058c8c1a96LL,EXC_CHK_NONE}, // 0.3
   {0x3FE48E410B630A91LL,0x3ffe6a60f311e333LL,EXC_CHK_NONE}, // 0.642365
   {0x3FE0000000000000LL,0x3ffa61298e1e069cLL,EXC_CHK_NONE}, // 0.5
   {0x405021EB851EB852LL,0x45c11d33b0716b95LL,EXC_CHK_NONE}, // 64.53
   {0x40FF5D35B020C49CLL,0x7ff0000000000000LL,EXC_CHK_OVFL}, // 128467.3555
   {0xC08F400000000000LL,0x0000000000000000LL,EXC_CHK_UNFL}, // -1000
   {0x408F400000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL}, // 1000
   {0x0000000000000000LL,0x3ff0000000000000LL,EXC_CHK_NONE},

};

