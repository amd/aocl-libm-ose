//R.obtained=FN_PROTOTYPE(fma)(P1.input, P2.input, P3.input)
//double,double,double,double,ExcFlags
//P1 P2 P3 R E
//unsigned long long int|double, unsigned long long int|double, unsigned long long int|double, unsigned  long long int|double,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_fma(P1.V3[j],P2.V3[j],P3.V3[j])
//double double double double ExcFlags
//ULP amd_ref_fma_ULP(P1.V3[j],P2.V3[j],P3.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{
    /*Every general-computational and quiet-computational operation
    involving one or more input NaNs, none of them signaling, shall
    signal no exception, except fusedMultiplyAdd might signal the
    invalid operation exception (see 7.2).*/
    /*Multiplicands as zero*/
    { F64_POS_ZERO, F64_POS_ZERO, F64_POS_SNAN , F64_POS_QNAN, EXC_CHK_INVL}, //1
    { F64_NEG_ZERO, F64_NEG_ZERO, F64_NEG_SNAN , F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_ZERO, F64_POS_ZERO, F64_POS_SNAN_Q,F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_ZERO, F64_NEG_ZERO, F64_NEG_SNAN_Q,F64_NEG_QNAN, EXC_CHK_NONE},
    { F64_NEG_ZERO, F64_POS_ZERO, F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_ZERO, F64_NEG_ZERO, F64_NEG_QNAN,  F64_NEG_QNAN, EXC_CHK_NONE},
    /*Multiplicands as one*/
    { F64_POS_ONE, F64_POS_ONE, F64_POS_SNAN , F64_POS_QNAN, EXC_CHK_INVL},
    { F64_NEG_ONE, F64_NEG_ONE, F64_NEG_SNAN , F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_ONE, F64_POS_ONE, F64_POS_SNAN_Q,F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_ONE, F64_NEG_ONE, F64_NEG_SNAN_Q,F64_NEG_QNAN, EXC_CHK_NONE},
    { F64_NEG_ONE, F64_POS_ONE, F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_ONE, F64_NEG_ONE, F64_NEG_QNAN,  F64_NEG_QNAN, EXC_CHK_NONE},
    /*Multiplicands as infinity*/
    { F64_POS_INF, F64_POS_INF, F64_POS_SNAN , F64_POS_QNAN, EXC_CHK_INVL}, //14
    { F64_NEG_INF, F64_NEG_INF, F64_NEG_SNAN , F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_INF, F64_POS_INF, F64_POS_SNAN_Q,F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_INF, F64_NEG_INF, F64_NEG_SNAN_Q,F64_NEG_QNAN, EXC_CHK_NONE},//This exception is implementation defined
    /*fusedMultiplyAdd: fusedMultiplyAdd(0, , c) or fusedMultiplyAdd(, 0, c)
    unless c is a quiet NaN; if c is a quiet NaN then it is implementation
    defined whether the invalid operation exception is signaled*/
    { F64_NEG_INF, F64_POS_INF, F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_NONE},//raising this exception is implementation defined.
    { F64_POS_INF, F64_NEG_INF, F64_NEG_QNAN,  F64_NEG_QNAN, EXC_CHK_NONE},
    /*One of the Multiplicand is NaN, and addend is proper value*/
    { F64_POS_INF,  F64_NEG_SNAN, F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_POS_INF,  F64_NEG_QNAN, F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_NONE},
    { F64_POS_SNAN, F64_NEG_INF,  F64_POS_ONE,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_POS_QNAN, F64_NEG_INF,  F64_POS_ONE,  F64_NEG_QNAN, EXC_CHK_NONE},
    /*Both the multiplicands are NaN, and addend is proper value*/
    { F64_POS_QNAN, F64_NEG_QNAN,  F64_POS_ONE,  F64_POS_QNAN, EXC_CHK_NONE},
    { F64_POS_QNAN, F64_NEG_SNAN,  F64_POS_ONE,  F64_POS_QNAN, EXC_CHK_INVL},
    { F64_POS_SNAN, F64_NEG_SNAN,  F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_POS_SNAN, F64_NEG_QNAN,  F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a QNan */
    { F64_POS_QNAN, F64_NEG_QNAN,  F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_NONE},//28
    { F64_NEG_QNAN, F64_POS_QNAN,  F64_NEG_QNAN,  F64_NEG_QNAN, EXC_CHK_NONE},
    /*Every input is a SNan */
    { F64_POS_SNAN, F64_NEG_SNAN,  F64_POS_SNAN,  F64_POS_QNAN, EXC_CHK_INVL},
    { F64_NEG_SNAN, F64_POS_SNAN,  F64_NEG_SNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a Nan 2 Snan 1 Qnan*/
    { F64_POS_SNAN, F64_NEG_SNAN,  F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_INVL},
    { F64_NEG_SNAN, F64_POS_QNAN,  F64_NEG_SNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_QNAN, F64_POS_SNAN,  F64_NEG_SNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a Nan 1 Snan 2 Qnan*/
    { F64_POS_SNAN, F64_NEG_QNAN,  F64_POS_QNAN,  F64_POS_QNAN, EXC_CHK_INVL},
    { F64_NEG_QNAN, F64_POS_QNAN,  F64_NEG_SNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_QNAN, F64_POS_SNAN,  F64_NEG_QNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    /*2 inputs are 1.0 and the other is snan */
    { F64_POS_SNAN, F64_NEG_ONE,  F64_POS_ONE,  F64_POS_QNAN, EXC_CHK_INVL},
    { F64_NEG_ONE, F64_POS_ONE,  F64_NEG_SNAN,  F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_ONE, F64_POS_SNAN,  F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_INVL},
    /*2 inputs are 1.0 and the other is qnan */
    { F64_POS_QNAN,F64_NEG_ONE,  F64_POS_ONE,  F64_POS_QNAN, EXC_CHK_NONE},
    { F64_NEG_ONE, F64_POS_ONE,  F64_NEG_QNAN, F64_NEG_QNAN, EXC_CHK_NONE},//42
    { F64_NEG_ONE, F64_POS_QNAN, F64_NEG_ONE,  F64_NEG_QNAN, EXC_CHK_NONE},

    /*Underflow cases*/
    { F64_POS_HDENORM, F64_POS_HDENORM, F64_POS_ZERO, F64_POS_ZERO, EXC_CHK_UNFL},//shud give Underflow
    { F64_POS_HDENORM, F64_NEG_HDENORM, F64_POS_ZERO, F64_NEG_ZERO, EXC_CHK_UNFL},// changed(4th argument) to F64_NEG_ZERO from F64_POS_ZERO
    { F64_NEG_HDENORM, F64_NEG_HDENORM, F64_NEG_ZERO, F64_POS_ZERO, EXC_CHK_UNFL},
    { F64_POS_HDENORM, F64_POS_HDENORM, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_POS_HDENORM, F64_NEG_HDENORM, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_NEG_HDENORM, F64_NEG_HDENORM, F64_NEG_INF, F64_NEG_INF, EXC_CHK_NONE},
    { F64_POS_HDENORM, F64_POS_HDENORM, F64_POS_ONE, F64_POS_ONE, EXC_CHK_NONE},
    { F64_POS_HDENORM, F64_NEG_HDENORM, F64_POS_ONE, F64_POS_ONE, EXC_CHK_NONE},
    { F64_NEG_HDENORM, F64_NEG_HDENORM, F64_NEG_ONE, F64_NEG_ONE, EXC_CHK_NONE},

    { F64_POS_LDENORM, F64_POS_LDENORM, F64_POS_ZERO, F64_POS_ZERO, EXC_CHK_UNFL},
    { F64_POS_LDENORM, F64_NEG_LDENORM, F64_POS_ZERO, F64_NEG_ZERO, EXC_CHK_UNFL},  // changed(4th argument) to F64_NEG_ZERO from F64_POS_ZERO
    { F64_NEG_LDENORM, F64_NEG_LDENORM, F64_NEG_ZERO, F64_POS_ZERO, EXC_CHK_UNFL},
    { F64_POS_LDENORM, F64_POS_LDENORM, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_POS_LDENORM, F64_NEG_LDENORM, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_NEG_LDENORM, F64_NEG_LDENORM, F64_NEG_INF, F64_NEG_INF, EXC_CHK_NONE},
    { F64_POS_LDENORM, F64_POS_LDENORM, F64_POS_ONE, F64_POS_ONE, EXC_CHK_NONE},
    { F64_POS_LDENORM, F64_NEG_LDENORM, F64_POS_ONE, F64_POS_ONE, EXC_CHK_NONE},
    { F64_NEG_LDENORM, F64_NEG_LDENORM, F64_NEG_ONE, F64_NEG_ONE, EXC_CHK_NONE},
    /*Overflow cases*/
    { F64_POS_HNORMAL, F64_POS_HNORMAL, F64_POS_ZERO, F64_POS_INF, EXC_CHK_OVFL},
    { F64_POS_HNORMAL, F64_NEG_HNORMAL, F64_POS_ZERO, F64_NEG_INF, EXC_CHK_OVFL},
    { F64_NEG_HNORMAL, F64_NEG_HNORMAL, F64_NEG_ZERO, F64_POS_INF, EXC_CHK_OVFL},
    { F64_POS_HNORMAL, F64_POS_HNORMAL, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_POS_HNORMAL, F64_NEG_HNORMAL, F64_POS_INF, F64_POS_INF, EXC_CHK_NONE},
    { F64_NEG_HNORMAL, F64_NEG_HNORMAL, F64_NEG_INF, F64_NEG_INF, EXC_CHK_NONE},
    { F64_POS_HNORMAL, F64_POS_HNORMAL, F64_POS_ONE, F64_POS_INF, EXC_CHK_OVFL},
    { F64_POS_HNORMAL, F64_NEG_HNORMAL, F64_POS_ONE, F64_NEG_INF, EXC_CHK_OVFL},
    { F64_NEG_HNORMAL, F64_NEG_HNORMAL, F64_NEG_ONE, F64_POS_INF, EXC_CHK_OVFL},
    /*Special cases based on section 7.2*/
    { F64_POS_ZERO, F64_POS_INF, F64_POS_ONE , F64_POS_QNAN, EXC_CHK_INVL}, // This exception is implementation defined
    { F64_NEG_INF, F64_NEG_ZERO, F64_NEG_ONE , F64_NEG_QNAN, EXC_CHK_INVL},
    { F64_NEG_ZERO, F64_POS_INF, F64_POS_QNAN, F64_POS_QNAN, EXC_CHK_NONE},//This exception is implementation defined
    { F64_POS_INF, F64_NEG_ZERO, F64_NEG_QNAN, F64_NEG_QNAN, EXC_CHK_NONE},//This exception is implementation defined
    {0x7c08f97200000000LL,0x4300000000000000LL,0xff7fffff00000000LL,0xff7f9c1938000000LL, EXC_CHK_NONE},

    {F64_POS_INF, F64_POS_HNORMAL, F64_NEG_INF, F64_POS_QNAN, EXC_CHK_INVL},
    {F64_NEG_INF, F64_POS_INF, F64_POS_INF, F64_POS_QNAN, EXC_CHK_INVL},

};

