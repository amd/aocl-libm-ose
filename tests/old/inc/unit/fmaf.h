//R.obtained=FN_PROTOTYPE(fmaf)(P1.input, P2.input, P3.input)
//float,float,float,float,ExcFlags
//P1 P2 P3 R E
//unsigned int|float, unsigned int|float, unsigned int|float, unsigned int|float,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_fmaf(P1.V3[j],P2.V3[j],P3.V3[j])
//float float float float ExcFlags
//ULP amd_ref_fmaf_ULP(P1.V3[j],P2.V3[j],P3.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{
    /*Every general-computational and quiet-computational operation
    involving one or more input NaNs, none of them signaling, shall
    signal no exception, except fusedMultiplyAdd might signal the
    invalid operation exception (see 7.2).*/

    /*Multiplicands as zero*/
    { F32_POS_ZERO, F32_POS_ZERO, F32_POS_SNAN , F32_POS_QNAN, EXC_CHK_INVL}, //1
    { F32_NEG_ZERO, F32_NEG_ZERO, F32_NEG_SNAN , F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_NEG_ZERO, F32_POS_ZERO, F32_POS_SNAN_Q,F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_ZERO, F32_NEG_ZERO, F32_NEG_SNAN_Q,F32_NEG_QNAN, EXC_CHK_NONE},
    { F32_NEG_ZERO, F32_POS_ZERO, F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_ZERO, F32_NEG_ZERO, F32_NEG_QNAN,  F32_NEG_QNAN, EXC_CHK_NONE},
    /*Multiplicands as one*/
    { F32_POS_ONE, F32_POS_ONE, F32_POS_SNAN , F32_POS_QNAN, EXC_CHK_INVL},
    { F32_NEG_ONE, F32_NEG_ONE, F32_NEG_SNAN , F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_NEG_ONE, F32_POS_ONE, F32_POS_SNAN_Q,F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_ONE, F32_NEG_ONE, F32_NEG_SNAN_Q,F32_NEG_QNAN, EXC_CHK_NONE},
    { F32_NEG_ONE, F32_POS_ONE, F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_ONE, F32_NEG_ONE, F32_NEG_QNAN,  F32_NEG_QNAN, EXC_CHK_NONE},
    /*Multiplicands as infinity*/
    { F32_POS_INF, F32_POS_INF, F32_POS_SNAN , F32_POS_QNAN, EXC_CHK_INVL}, 
    { F32_NEG_INF, F32_NEG_INF, F32_NEG_SNAN , F32_NEG_QNAN, EXC_CHK_INVL},//14
    { F32_NEG_INF, F32_POS_INF, F32_POS_SNAN_Q,F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_INF, F32_NEG_INF, F32_NEG_SNAN_Q,F32_NEG_QNAN, EXC_CHK_NONE},
    /*fusedMultiplyAdd: fusedMultiplyAdd(0, , c) or fusedMultiplyAdd(, 0, c)
    unless c is a quiet NaN; if c is a quiet NaN then it is implementation
    defined whether the invalid operation exception is signaled*/
    { F32_NEG_INF, F32_POS_INF, F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_INF, F32_NEG_INF, F32_NEG_QNAN,  F32_NEG_QNAN, EXC_CHK_NONE},
    /*One of the Multiplicand is NaN, and addend is proper value*/
    { F32_POS_INF,  F32_NEG_SNAN, F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_POS_INF,  F32_NEG_QNAN, F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_NONE},
    { F32_POS_SNAN, F32_NEG_INF,  F32_POS_ONE,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_POS_QNAN, F32_NEG_INF,  F32_POS_ONE,  F32_NEG_QNAN, EXC_CHK_NONE},
    /*Both the multiplicands are NaN, and addend is proper value*/
    { F32_POS_QNAN, F32_NEG_QNAN,  F32_POS_ONE,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_POS_QNAN, F32_NEG_SNAN,  F32_POS_ONE,  F32_POS_QNAN, EXC_CHK_INVL},
    { F32_POS_SNAN, F32_NEG_SNAN,  F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_POS_SNAN, F32_NEG_QNAN,  F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a QNan */
    { F32_POS_QNAN, F32_NEG_QNAN,  F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_NEG_QNAN, F32_POS_QNAN,  F32_NEG_QNAN,  F32_NEG_QNAN, EXC_CHK_NONE},//28
    /*Every input is a SNan */
    { F32_POS_SNAN, F32_NEG_SNAN,  F32_POS_SNAN,  F32_POS_QNAN, EXC_CHK_INVL},
    { F32_NEG_SNAN, F32_POS_SNAN,  F32_NEG_SNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a Nan 2 Snan 1 Qnan*/
    { F32_POS_SNAN, F32_NEG_SNAN,  F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_INVL},
    { F32_NEG_SNAN, F32_POS_QNAN,  F32_NEG_SNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_NEG_QNAN, F32_POS_SNAN,  F32_NEG_SNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    /*Every input is a Nan 1 Snan 2 Qnan*/
    { F32_POS_SNAN, F32_NEG_QNAN,  F32_POS_QNAN,  F32_POS_QNAN, EXC_CHK_INVL},
    { F32_NEG_QNAN, F32_POS_QNAN,  F32_NEG_SNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_NEG_QNAN, F32_POS_SNAN,  F32_NEG_QNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    /*2 inputs are 1.0 and the other is snan */
    { F32_POS_SNAN, F32_NEG_ONE,  F32_POS_ONE,  F32_POS_QNAN, EXC_CHK_INVL},
    { F32_NEG_ONE, F32_POS_ONE,  F32_NEG_SNAN,  F32_NEG_QNAN, EXC_CHK_INVL},
    { F32_NEG_ONE, F32_POS_SNAN,  F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_INVL},
    /*2 inputs are 1.0 and the other is qnan */
    { F32_POS_QNAN,F32_NEG_ONE,  F32_POS_ONE,  F32_POS_QNAN, EXC_CHK_NONE},
    { F32_NEG_ONE, F32_POS_ONE,  F32_NEG_QNAN, F32_NEG_QNAN, EXC_CHK_NONE},
    { F32_NEG_ONE, F32_POS_QNAN, F32_NEG_ONE,  F32_NEG_QNAN, EXC_CHK_NONE},//42


    /*Underflow cases*/
    { F32_POS_HDENORM, F32_POS_HDENORM, F32_POS_ZERO, F32_POS_ZERO, EXC_CHK_UNFL},//shud give Underflow
    { F32_POS_HDENORM, F32_NEG_HDENORM, F32_POS_ZERO, F32_NEG_ZERO, EXC_CHK_UNFL},
    { F32_NEG_HDENORM, F32_NEG_HDENORM, F32_NEG_ZERO, F32_POS_ZERO, EXC_CHK_UNFL},
    { F32_POS_HDENORM, F32_POS_HDENORM, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},//46
    { F32_POS_HDENORM, F32_NEG_HDENORM, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},
    { F32_NEG_HDENORM, F32_NEG_HDENORM, F32_NEG_INF, F32_NEG_INF, EXC_CHK_NONE},
    { F32_POS_HDENORM, F32_POS_HDENORM, F32_POS_ONE, F32_POS_ONE, EXC_CHK_NONE},
    { F32_POS_HDENORM, F32_NEG_HDENORM, F32_POS_ONE, F32_POS_ONE, EXC_CHK_NONE},
    { F32_NEG_HDENORM, F32_NEG_HDENORM, F32_NEG_ONE, F32_NEG_ONE, EXC_CHK_NONE},//51

    { F32_POS_LDENORM, F32_POS_LDENORM, F32_POS_ZERO, F32_POS_ZERO, EXC_CHK_UNFL},
    { F32_POS_LDENORM, F32_NEG_LDENORM, F32_POS_ZERO, F32_NEG_ZERO, EXC_CHK_UNFL},
    { F32_NEG_LDENORM, F32_NEG_LDENORM, F32_NEG_ZERO, F32_POS_ZERO, EXC_CHK_UNFL},
    { F32_POS_LDENORM, F32_POS_LDENORM, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},//55
    { F32_POS_LDENORM, F32_NEG_LDENORM, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},
    { F32_NEG_LDENORM, F32_NEG_LDENORM, F32_NEG_INF, F32_NEG_INF, EXC_CHK_NONE},
    { F32_POS_LDENORM, F32_POS_LDENORM, F32_POS_ONE, F32_POS_ONE, EXC_CHK_NONE},
    { F32_POS_LDENORM, F32_NEG_LDENORM, F32_POS_ONE, F32_POS_ONE, EXC_CHK_NONE},
    { F32_NEG_LDENORM, F32_NEG_LDENORM, F32_NEG_ONE, F32_NEG_ONE, EXC_CHK_NONE},//60
    /*Overflow cases*/
    { F32_POS_HNORMAL, F32_POS_HNORMAL, F32_POS_ZERO, F32_POS_INF, EXC_CHK_OVFL},
    { F32_POS_HNORMAL, F32_NEG_HNORMAL, F32_POS_ZERO, F32_NEG_INF, EXC_CHK_OVFL},
    { F32_NEG_HNORMAL, F32_NEG_HNORMAL, F32_NEG_ZERO, F32_POS_INF, EXC_CHK_OVFL},
    { F32_POS_HNORMAL, F32_POS_HNORMAL, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},
    { F32_POS_HNORMAL, F32_NEG_HNORMAL, F32_POS_INF, F32_POS_INF, EXC_CHK_NONE},//65
    { F32_NEG_HNORMAL, F32_NEG_HNORMAL, F32_NEG_INF, F32_NEG_INF, EXC_CHK_NONE},
    { F32_POS_HNORMAL, F32_POS_HNORMAL, F32_POS_ONE, F32_POS_INF, EXC_CHK_OVFL},
    { F32_POS_HNORMAL, F32_NEG_HNORMAL, F32_POS_ONE, F32_NEG_INF, EXC_CHK_OVFL},
    { F32_NEG_HNORMAL, F32_NEG_HNORMAL, F32_NEG_ONE, F32_POS_INF, EXC_CHK_OVFL},//69

    /*Special cases based on section 7.2*/
    { F32_POS_ZERO, F32_POS_INF, F32_POS_ONE , F32_POS_QNAN, EXC_CHK_INVL}, // This exception is implementation defined
    { F32_NEG_INF, F32_NEG_ZERO, F32_NEG_ONE , F32_NEG_QNAN, EXC_CHK_INVL},// This exception is implementation defined
    { F32_NEG_ZERO, F32_POS_INF, F32_POS_QNAN, F32_POS_QNAN, EXC_CHK_NONE},//This exception is implementation defined
    { F32_POS_INF, F32_NEG_ZERO, F32_NEG_QNAN, F32_NEG_QNAN, EXC_CHK_NONE},//This exception is implementation defined
    {0x400f020c,0x4208f972,0x42615c29,0x4304db79, EXC_CHK_NONE},
    {0x43e8ec5a,0x494190dd,0xc959c827,0x4dafb11a, EXC_CHK_NONE},
    {0x7c08f972,0x43000000,0x7f7fffff,0x7f800000, EXC_CHK_OVFL},//76
    {0x1a000000,0x1a000000,0x00000001,0x00000002, EXC_CHK_UNFL},
    {0x25567658,0x14567658,0x00800000,0x0080059d, EXC_CHK_NONE},
    {0x3dcccccd,0xbdcccccd,0x3c23d70a,0xb00f5c29, EXC_CHK_NONE},
    {0x40000000,0x41500000,0xc1d00000,0x00000000, EXC_CHK_NONE},
    {0x3e99999a,0x3e99999a,0xb1f5c290,0x3db851ec, EXC_CHK_NONE},
    {0x45916eec,0x42f67d98,0x458d94f6,0x490d231a, EXC_CHK_NONE}, // 4653.865, 123.2453, 4530.62
    {0x41200000,0x40400000,0x40e00000,0x42140000, EXC_CHK_NONE}, // 10, 7, 3
    {0xc5129000,0xca0f2b38,0x4a0f0694,0x4fa4003d, EXC_CHK_NONE}, // -2345, -2345678, 2343333
    {0xbdcccccd,0xbe99999a,0x3e4cccce,0x3e6b8520, EXC_CHK_NONE}, // -0.1, -0.3, 0.2
    {0x70000000,0x70000000,F32_NEG_INF,F32_NEG_INF, EXC_CHK_NONE},//86
    {0xf0000000,0xf0000000,F32_NEG_INF,F32_NEG_INF, EXC_CHK_NONE},
    {0x70000000,0xf0000000,F32_POS_INF,F32_POS_INF, EXC_CHK_NONE},
    {0xf0000000,0x70000000,F32_POS_INF,F32_POS_INF, EXC_CHK_NONE},
    {F32_NEG_INF,F32_NEG_ONE,0xf0000000,F32_POS_INF, EXC_CHK_NONE},//inf is an exact value hence no exc
    {F32_POS_INF,F32_NEG_ONE,0x70000000,F32_NEG_INF, EXC_CHK_NONE},
    {0x8b39d927,0x55ce960f,0x12a4d23f,0xa195f9ae, EXC_CHK_NONE},
    {0x4666fffa,0x3fe1fff8,0x37fff3ff,0x46cbedf3, EXC_CHK_NONE},
    {0xdeffffff,0xdeffffff,0xff7fffff,0xff3fffff, EXC_CHK_NONE},
    {0x5effffff,0xdeffffff,0x7f7fffff,0x7f3fffff, EXC_CHK_NONE},
    {0xc0400000,0xdf800001,0xc0400000,0x60400001, EXC_CHK_NONE},

    {0xbf800001,0x3fffffff,0xa8800400,0xc0000001, EXC_CHK_NONE},
    {0xbf800001,0x3fffffff,0xa8800000,0xc0000000, EXC_CHK_NONE},
    {0x3f800001,0x3fffffff,0x28800400,0x40000001, EXC_CHK_NONE},
    {0x3f800001,0x3fffffff,0x28800000,0x40000000, EXC_CHK_NONE},

    {0x3f800800,0x3f800800,0x24000000,0x3f801001, EXC_CHK_NONE},
    {0xbf800800,0x3f800800,0xa4000000,0xbf801001, EXC_CHK_NONE},

    {0x3f800800,0x3f801800,0x24000000,0x3f802002, EXC_CHK_NONE},
    {0x3f800800,0x3f801800,0xa4000000,0x3f802001, EXC_CHK_NONE},
    {0xbf800800,0x3f801800,0x24000000,0xbf802001, EXC_CHK_NONE},
    {0xbf800800,0x3f801800,0xa4000000,0xbf802002, EXC_CHK_NONE},

    {0x3f800000,0x3f800001,0x4b800000,0x4b800001, EXC_CHK_NONE},
    {0x3f800000,0xbf800001,0xcb800000,0xcb800001, EXC_CHK_NONE},

    {0x3fc00400,0xbf800001,0x2d800000,0xbfc00402, EXC_CHK_NONE},
    {0x3fc00400,0x3f800001,0xad800000,0x3fc00402, EXC_CHK_NONE},
    {0x3fc00400,0x3f800001,0xad800001,0x3fc00401, EXC_CHK_NONE},
    {0x3fc00400,0xbf800001,0x2d800001,0xbfc00401, EXC_CHK_NONE},

    {0x80000000,0x00000000,0x80000000,0x80000000, EXC_CHK_NONE},

    {F32_POS_INF, F32_POS_HNORMAL, F32_NEG_INF, F32_POS_QNAN, EXC_CHK_INVL},
    {F32_NEG_INF, F32_POS_INF, F32_POS_INF, F32_POS_QNAN, EXC_CHK_INVL},

};

