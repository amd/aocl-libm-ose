//R.obtained=FN_PROTOTYPE(fmodf)(P1.input, P2.input)
//float,float,float,ExcFlags
//P1 P2 R E
//unsigned int|float, unsigned int|float, unsigned int|float,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_fmodf(P1.V3[j],P2.V3[j])
//float float float ExcFlags
//ULP amd_ref_fmodf_ULP(P1.V3[j],P2.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{


    {F32_NEG_QNAN,F32_NEG_INF,F32_POS_QNAN,EXC_CHK_NONE}, //
    {0xfff4b200,0x5c713452,0x7fc00001,EXC_CHK_NONE},        
    /*Constant inputs from the Constants.h*/
    {F32_POS_SNAN,F32_POS_SNAN,F32_POS_QNAN,EXC_CHK_INVL}, // invalid
    {F32_NEG_SNAN,F32_POS_QNAN,F32_POS_QNAN,EXC_CHK_INVL}, // invalid
    {F32_POS_SNAN_Q,F32_NEG_QNAN,F32_POS_QNAN,EXC_CHK_NONE}, //
    {F32_NEG_SNAN_Q,F32_POS_QNAN,F32_POS_QNAN,EXC_CHK_NONE}, //
    {F32_POS_QNAN,F32_POS_QNAN,F32_POS_QNAN,EXC_CHK_NONE}, //
    {F32_NEG_QNAN,F32_POS_SNAN,F32_POS_QNAN,EXC_CHK_INVL}, //

    {F32_POS_INF,F32_POS_INF,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_INF,F32_NEG_INF,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_INF,F32_NEG_SNAN,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_INF,F32_NEG_QNAN,F32_POS_QNAN,EXC_CHK_NONE}, //
    {F32_POS_INF,F32_POS_ONE,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_INF,F32_NEG_ONE,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_POS_INF,F32_POS_ZERO,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_INF,F32_NEG_ZERO,F32_POS_QNAN,EXC_CHK_INVL}, //

    {F32_POS_ONE,F32_POS_SNAN,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_ONE,F32_NEG_QNAN,F32_NEG_QNAN,EXC_CHK_NONE}, //

    {F32_POS_ZERO,F32_POS_SNAN,F32_POS_QNAN,EXC_CHK_INVL}, //
    {F32_NEG_ZERO,F32_NEG_QNAN,F32_NEG_QNAN,EXC_CHK_NONE}, //
    /*Input as High denormal*/
    {F32_POS_HDENORM,F32_POS_HDENORM,0x00000000,EXC_CHK_NONE},
    {F32_POS_HDENORM,F32_NEG_HDENORM,0x00000000,EXC_CHK_NONE},
    {F32_POS_HDENORM,F32_POS_LDENORM,0x00000000,EXC_CHK_NONE},
    {F32_POS_HDENORM,F32_NEG_LDENORM,0x00000000,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_POS_HDENORM,0x00000001,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_NEG_HDENORM,0x00000001,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_POS_LDENORM,0x00000000,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_NEG_LDENORM,0x00000000,EXC_CHK_NONE},

    {F32_POS_HDENORM,F32_POS_LNORMAL,0x007fffff,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_NEG_HNORMAL,0x00000001,EXC_CHK_NONE}, /*Confirm this exception*/
    {F32_NEG_HNORMAL,F32_POS_LDENORM,0x80000000,EXC_CHK_NONE},
    {F32_POS_LNORMAL,F32_NEG_HDENORM,0x00000001,EXC_CHK_UNFL},
    {F32_POS_HDENORM,F32_POS_ONE,0x007fffff,EXC_CHK_NONE},
    {F32_POS_LDENORM,F32_NEG_ONE,0x00000001,EXC_CHK_NONE},
    {F32_POS_HDENORM,F32_POS_ZERO,0x7fc00000,EXC_CHK_INVL},
    {F32_POS_LDENORM,F32_NEG_ZERO,0x7fc00000,EXC_CHK_INVL},
    {F32_POS_HNORMAL,F32_POS_ONE,0x00000000,EXC_CHK_NONE},
    {F32_POS_LNORMAL,F32_NEG_ONE,0x00800000,EXC_CHK_NONE},
    {F32_POS_HNORMAL,F32_POS_ZERO,0x7fc00000,EXC_CHK_INVL},
    {F32_POS_LNORMAL,F32_NEG_ZERO,0x7fc00000,EXC_CHK_INVL},

    {F32_POS_PI,F32_NEG_PI,0x00000000,EXC_CHK_NONE}, //
    {F32_NEG_PIBY2,F32_POS_PIBY2,0x80000000,EXC_CHK_NONE}, //
    //Special cases in IEEE doc
    //fmod(x, inf) for finite normal x
    {F32_POS_ONE,F32_POS_INF,F32_POS_ONE,EXC_CHK_NONE},
    {F32_NEG_ONE,F32_POS_INF,F32_NEG_ONE,EXC_CHK_NONE},
    {0x80000000,0xa8117a2e,0x80000000,EXC_CHK_NONE},

};

