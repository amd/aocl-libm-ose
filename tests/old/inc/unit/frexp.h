//R.obtained=FN_PROTOTYPE(frexp)(P1.input, &P2.obtained)
//double,double,int,ExcFlags
//P1 R P2 E
//unsigned long long int|double, unsigned  long long int|double,int|int,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_frexp(P1.V3[j],&P2.V3[j])
//double, double, int, ExcFlags
//ULP amd_ref_frexp_ULP(P1.V3[j],&P2.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{
	{F64_POS_SNAN , F64_POS_SNAN, 		0x00000000, EXC_CHK_INVL},
    {F64_NEG_SNAN , F64_NEG_QNAN, 		0x00000000, EXC_CHK_INVL},
    {F64_POS_SNAN_Q,F64_POS_SNAN, 		0x00000000, EXC_CHK_NONE},
    {F64_NEG_SNAN_Q,F64_NEG_QNAN, 		0x00000000, EXC_CHK_NONE},
    {F64_POS_QNAN , F64_POS_QNAN, 		0x00000000, EXC_CHK_NONE},
    {F64_NEG_QNAN , F64_NEG_QNAN, 		0x00000000, EXC_CHK_NONE},
    {F64_POS_INF  , F64_POS_INF,  		0x00000000, EXC_CHK_NONE},
    {F64_NEG_INF  , F64_NEG_INF,        0x00000000, EXC_CHK_NONE},
    {F64_POS_ONE  ,   0x3FE0000000000000LL, 0x00000001, EXC_CHK_NONE},
    {F64_NEG_ONE  ,   0xBFE0000000000000LL, 0x00000001, EXC_CHK_NONE},
    {F64_POS_ZERO ,   0x0000000000000000LL, 0x00000000, EXC_CHK_NONE},
    {F64_NEG_ZERO ,   0x8000000000000000LL, 0x00000000, EXC_CHK_NONE},
    {F64_POS_HDENORM, 0x3feffffffffffffeLL, 0xfffffc02, EXC_CHK_NONE},
    {F64_NEG_HDENORM, 0xbfeffffffffffffeLL, 0xfffffc02, EXC_CHK_NONE},
    {F64_POS_LDENORM, 0x3fe0000000000000LL, 0xfffffbcf, EXC_CHK_NONE},
    {F64_NEG_LDENORM, 0xbfe0000000000000LL, 0xfffffbcf, EXC_CHK_NONE},
    {F64_POS_HNORMAL, 0x3fefffffffffffffLL, 0x00000400, EXC_CHK_NONE},
    {F64_NEG_HNORMAL, 0xbfefffffffffffffLL, 0x00000400, EXC_CHK_NONE},
    {F64_POS_LNORMAL, 0x3fe0000000000000LL, 0xfffffc03, EXC_CHK_NONE},
    {F64_NEG_LNORMAL, 0xbfe0000000000000LL, 0xfffffc03, EXC_CHK_NONE},

    /*Other test cases*/
    {0x0005fde623545abcLL,  0x3fe7f7988d516af0LL, -1023, EXC_CHK_NONE}, // denormal intermediate
    {0x8002344ade5def12LL,  0xbfe1a256f2ef7890LL, -1024, EXC_CHK_NONE}, // -denormal intermediate
    {0x43b3c4eafedcab02LL,  0x3fe3c4eafedcab02LL,    61, EXC_CHK_NONE}, // normal intermediate
    {0xc5812e71245acfdbLL,  0xbfe12e71245acfdbLL,    90, EXC_CHK_NONE}, // -normal intermediate
    {0x7FFe1a5701234dc3LL,  0x7ffe1a5701234dc3LL,     0, EXC_CHK_NONE}, // qnan intermediate
    {0x7FFFFFFFFFFFFFFFLL,  0x7fffffffffffffffLL,     0, EXC_CHK_NONE}, // qnan max
    {0xFFF9123425dcba31LL,  0xfff9123425dcba31LL,     0, EXC_CHK_NONE}, // -qnan intermediate
    {0x7FF5344752a0bd90LL,  0x7ff5344752a0bd90LL,     0, EXC_CHK_INVL}, // snan intermediate
    {0xFFF7FFFFFFFFFFFFLL,  0xfff7ffffffffffffLL,     0, EXC_CHK_INVL}, // -snan max
    {0x3FF921FB54442D18LL,  0x3fe921fb54442d18LL,     1, EXC_CHK_NONE}, // pi/2
    {0x400921FB54442D18LL,  0x3fe921fb54442d18LL,     2, EXC_CHK_NONE}, // pi
    {0x401921FB54442D18LL,  0x3fe921fb54442d18LL,     3, EXC_CHK_NONE}, // 2pi
    {0x3FFB7E151628AED3LL,  0x3feb7e151628aed3LL,     1, EXC_CHK_NONE}, // e --
    {0x4005BF0A8B145769LL,  0x3fe5bf0a8b145769LL,     2, EXC_CHK_NONE}, // e
    {0x400DBF0A8B145769LL,  0x3fedbf0a8b145769LL,     2, EXC_CHK_NONE}, // e ++
    {0x0000000000000000LL,  0x0000000000000000LL,     0, EXC_CHK_NONE}, // 0
    {0x3C4536B8B14B676CLL,  0x3fe536b8b14b676cLL,   -58, EXC_CHK_NONE}, // 0.0000000000000000023
    {0x3FDFFFFBCE4217D3LL,  0x3feffffbce4217d3LL,    -1, EXC_CHK_NONE}, // 0.4999989999999999999
    {0x3FE000000000006CLL,  0x3fe000000000006cLL,     0, EXC_CHK_NONE}, // 0.500000000000012
    {0x8000000000000000LL,  0x8000000000000000LL,     0, EXC_CHK_NONE}, // -0
    {0xBBDB2752CE74FF42LL,  0xbfeb2752ce74ff42LL,   -65, EXC_CHK_NONE}, // -0.000000000000000000023
    {0xBFDFFFFBCE4217D3LL,  0xbfeffffbce4217d3LL,    -1, EXC_CHK_NONE}, // -0.4999989999999999999
    {0xBFE000000000006CLL,  0xbfe000000000006cLL,     0, EXC_CHK_NONE}, // -0.500000000000012
    {0x3FF0000000000000LL,  0x3fe0000000000000LL,     1, EXC_CHK_NONE}, // 1
    {0x3FEFFFFFC49BD0DCLL,  0x3fefffffc49bd0dcLL,     0, EXC_CHK_NONE}, // 0.9999998893750006
    {0x3FF0000000000119LL,  0x3fe0000000000119LL,     1, EXC_CHK_NONE}, // 1.0000000000000624998
    {0x3FF7FFFEF39085F4LL,  0x3fe7fffef39085f4LL,     1, EXC_CHK_NONE}, // 1.499998999999999967
    {0x3FF8000000000001LL,  0x3fe8000000000001LL,     1, EXC_CHK_NONE}, // 1.50000000000000012
    {0xBFF0000000000000LL,  0xbfe0000000000000LL,     1, EXC_CHK_NONE}, // -1
    {0xBFEFFFFFC49BD0DCLL,  0xbfefffffc49bd0dcLL,     0, EXC_CHK_NONE}, // -0.9999998893750006
    {0xBFF0000000000119LL,  0xbfe0000000000119LL,     1, EXC_CHK_NONE}, // -1.0000000000000624998
    {0xBFF7FFFEF39085F4LL,  0xbfe7fffef39085f4LL, 	  1, EXC_CHK_NONE}, // -1.499998999999999967
    {0xBFF8000000000001LL,  0xbfe8000000000001LL, 	  1, EXC_CHK_NONE}, // -1.50000000000000012
    {0x4000000000000000LL,  0x3fe0000000000000LL, 	  2, EXC_CHK_NONE}, // 2
    {0xC000000000000000LL,  0xbfe0000000000000LL, 	  2, EXC_CHK_NONE}, // -2
    {0x4024000000000000LL,  0x3fe4000000000000LL, 	  4, EXC_CHK_NONE}, // 10
    {0xC024000000000000LL,  0xbfe4000000000000LL, 	  4, EXC_CHK_NONE}, // -10
    {0x408F400000000000LL,  0x3fef400000000000LL, 	 10, EXC_CHK_NONE}, // 1000
    {0xC08F400000000000LL,  0xbfef400000000000LL, 	 10, EXC_CHK_NONE}, // -1000
    {0x4050D9999999999ALL,  0x3fe0d9999999999aLL, 	  7, EXC_CHK_NONE}, // 67.4
    {0xC050D9999999999ALL,  0xbfe0d9999999999aLL, 	  7, EXC_CHK_NONE}, // -67.4
    {0x409EFE6666666666LL,  0x3feefe6666666666LL, 	 11, EXC_CHK_NONE}, // 1983.6
    {0xC09EFE6666666666LL,  0xbfeefe6666666666LL, 	 11, EXC_CHK_NONE}, // -1983.6
    {0x4055E00000000000LL,  0x3fe5e00000000000LL, 	  7, EXC_CHK_NONE}, // 87.5
    {0xC055E00000000000LL,  0xbfe5e00000000000LL, 	  7, EXC_CHK_NONE}, // -87.5
    {0x41002BC800000000LL,  0x3fe02bc800000000LL, 	 18, EXC_CHK_NONE}, // 132473
    {0xC1002BC800000000LL,  0xbfe02bc800000000LL, 	 18, EXC_CHK_NONE}, // -132473
    {0x4330000000000000LL,  0x3fe0000000000000LL, 	 53, EXC_CHK_NONE}, // 2^52
    {0x4330000000000001LL,  0x3fe0000000000001LL, 	 53, EXC_CHK_NONE}, // 2^52 + 1
    {0x432FFFFFFFFFFFFFLL,  0x3fefffffffffffffLL, 	 52, EXC_CHK_NONE}, // 2^52 -1 + 0.5
    {0xC330000000000000LL,  0xbfe0000000000000LL, 	 53, EXC_CHK_NONE}, // -2^52
    {0xC330000000000001LL,  0xbfe0000000000001LL, 	 53, EXC_CHK_NONE}, // -(2^52 + 1)
    {0xC32FFFFFFFFFFFFFLL,  0xbfefffffffffffffLL, 	 52, EXC_CHK_NONE}  // -(2^52 -1 + 0.5)

};

