//R.obtained=FN_PROTOTYPE(llrintf)(P1.input)
//float, long long int,ExcFlags
//P1 R E
//unsigned int|float,unsigned long long int|long long int, ExcFlags|ExcFlags
//R.V3[j] = llrintf(P1.V3[j])
//float,long long int,ExcFlags
//ULP amd_ref_llrintf_ULP(P1.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()

static struct data input[] =
{

{F32_POS_SNAN, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_NEG_SNAN, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_POS_QNAN, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_NEG_QNAN, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_POS_INF , F64_NEG_ZERO, EXC_CHK_INVL},
{F32_NEG_INF , F64_NEG_ZERO, EXC_CHK_INVL},
{F32_POS_ONE,  1, EXC_CHK_NONE},
{F32_NEG_ONE, -1, EXC_CHK_NONE},
{F32_POS_ZERO, 0, EXC_CHK_NONE},
{F32_NEG_ZERO,-0, EXC_CHK_NONE},
{F32_POS_HDENORM, 0, EXC_CHK_NONE},
{F32_NEG_HDENORM,-1, EXC_CHK_NONE},
{F32_POS_LDENORM, 0, EXC_CHK_NONE},
{F32_NEG_LDENORM,-1, EXC_CHK_NONE},
{F32_POS_HNORMAL, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_NEG_HNORMAL, F64_NEG_ZERO, EXC_CHK_INVL},
{F32_POS_LNORMAL, 0, EXC_CHK_NONE},
{F32_NEG_LNORMAL,-1, EXC_CHK_NONE},
{F32_POS_PI     , 3, EXC_CHK_NONE},
{F32_NEG_PI     ,-4, EXC_CHK_NONE},
{F32_POS_PIBY2  , 1, EXC_CHK_NONE},
{F32_NEG_PIBY2  ,-2, EXC_CHK_NONE},

{0x0005fde6, 0, EXC_CHK_NONE},  // denormal intermediate
{0x007fffff, 0, EXC_CHK_NONE},  // denormal max
{0x80000001,-1, EXC_CHK_NONE},  // -denormal min
{0x805def12,-1, EXC_CHK_NONE},  // -denormal intermediate
{0x807FFFFF,-1, EXC_CHK_NONE},  // -denormal max
{0x00800000, 0, EXC_CHK_NONE},  // normal min
{0x43b3c4ea, 359, EXC_CHK_NONE},  // normal intermediate
{0x80800000,-1, EXC_CHK_NONE},  // -normal min
{0xc5812e71, -4134, EXC_CHK_NONE},  // -normal intermediate
{0x7Fe1a570, F64_NEG_ZERO, EXC_CHK_INVL},  // qnan intermediate
{0xFFd2ba31, F64_NEG_ZERO, EXC_CHK_INVL},  // -qnan intermediate
{0xFFFFFFFF, F64_NEG_ZERO, EXC_CHK_INVL},  // -qnan max

{0x40C90FDB, 6, EXC_CHK_NONE},  // 2pi
{0x402DF853, 2, EXC_CHK_NONE},  // e --
{0x402DF854, 2, EXC_CHK_NONE},  // e
{0x402DF855, 2, EXC_CHK_NONE},  // e ++
{0x37C0F01F, 0, EXC_CHK_NONE},  // 0.000023
{0x3EFFFEB0, 0, EXC_CHK_NONE},  // 0.49999
{0x3F0000C9, 0, EXC_CHK_NONE},  // 0.500012
{0xb7C0F01F,-1, EXC_CHK_NONE},  // -0.000023
{0xbEFFFEB0,-1, EXC_CHK_NONE},  // -0.49999
{0xbF0000C9,-1, EXC_CHK_NONE},  // -0.500012
{0x3f700001, 0, EXC_CHK_NONE},  // 0.93750006
{0x3F87FFFE, 1, EXC_CHK_NONE},  // 1.0624998
{0x3FBFFFAC, 1, EXC_CHK_NONE},  // 1.49999
{0x3FC00064, 1, EXC_CHK_NONE},  // 1.500012
{0xbf700001,-1, EXC_CHK_NONE},  // -0.93750006
{0xbF87FFFE,-2, EXC_CHK_NONE},  // -1.0624998
{0xbFBFFFAC,-2, EXC_CHK_NONE},  // -1.49999
{0xbFC00064,-2, EXC_CHK_NONE},  // -1.500012
{0x40000000, 2, EXC_CHK_NONE},  // 2
{0xc0000000,-2, EXC_CHK_NONE},  // -2
{0x41200000, 10, EXC_CHK_NONE},  // 10
{0xc1200000,-10, EXC_CHK_NONE},  // -10
{0x447A0000, 1000, EXC_CHK_NONE},  // 1000
{0xc47A0000,-1000, EXC_CHK_NONE},  // -1000
{0x4286CCCC, 67, EXC_CHK_NONE},  // 67.4
{0xc286CCCC,-68, EXC_CHK_NONE},  // -67.4
{0x44F7F333, 1983, EXC_CHK_NONE},  // 1983.6
{0xc4F7F333,-1984, EXC_CHK_NONE},  // -1983.6
{0x42AF0000, 87, EXC_CHK_NONE},  // 87.5
{0xc2AF0000,-88, EXC_CHK_NONE},  // -87.5
{0x48015E40, 132473, EXC_CHK_NONE},  // 132473
{0xc8015E40,-132473, EXC_CHK_NONE},  // -132473
{0x5f000000, F64_NEG_ZERO, EXC_CHK_INVL},  // 2^63
{0x5f000001, F64_NEG_ZERO, EXC_CHK_INVL},  // 2^63 + 1
{0x5eFFFFFF, 0x7fffff8000000000, EXC_CHK_NONE},  // 2^63 -1 + 0.5
{0xdf000000, F64_NEG_ZERO, EXC_CHK_NONE},  // -2^63
{0xdf000001, F64_NEG_ZERO, EXC_CHK_INVL},  // -(2^63 + 1)
{0xdeFFFFFF, 0x8000008000000000, EXC_CHK_NONE}   // -(2^63 -1 + 0.5)

};
