//R.obtained=FN_PROTOTYPE(pow)(P1.input, P2.input)
//double,double,double,ExcFlags
//P1 P2 R E
//unsigned long long int|double, unsigned long long int|double, unsigned  long long int|double,ExcFlags|ExcFlags
//R.V3[j] = amd_ref_pow(P1.V3[j],P2.V3[j])
//double double double ExcFlags
//ULP amd_ref_pow_ULP(P1.V3[j],P2.V3[j],R.V3[j],&testdata[k].R.ulp[j], &testdata[k].R.relative_error[j])
//testdata[j].R.MaxUlp()
#include <unistd.h>
static struct data input[] =
{
    {F64_POS_HDENORM,F64_POS_HDENORM,0x3FF0000000000000LL,EXC_CHK_NONE},
{F64_POS_HDENORM,F64_NEG_HDENORM,0x3ff0000000000000LL,EXC_CHK_NONE},
{F64_NEG_HDENORM,F64_POS_LDENORM,0x7ff8000000000000LL,EXC_CHK_INVL},
{F64_NEG_HDENORM,F64_NEG_LDENORM,0x7ff8000000000000LL,EXC_CHK_INVL},
{F64_POS_LDENORM,F64_POS_HDENORM,0x3ff0000000000000LL,EXC_CHK_NONE},
{F64_POS_LDENORM,F64_NEG_HDENORM,0x3ff0000000000000LL,EXC_CHK_NONE},
{F64_NEG_LDENORM,F64_POS_LDENORM,0x7ff8000000000000LL,EXC_CHK_INVL},
{F64_NEG_LDENORM,F64_NEG_LDENORM,0x7ff8000000000000LL,EXC_CHK_INVL},
{F64_POS_HDENORM,F64_POS_LNORMAL,0x3ff0000000000000LL,EXC_CHK_NONE},
{F64_POS_LDENORM,F64_NEG_HNORMAL,0x7ff0000000000000LL,EXC_CHK_OVFL},//10


{F64_POS_HNORMAL,F64_POS_HNORMAL,0x7FF0000000000000LL,EXC_CHK_OVFL},
{F64_POS_HNORMAL,F64_NEG_HNORMAL,0x0000000000000000LL,EXC_CHK_UNFL},
{F64_NEG_HNORMAL,F64_POS_LNORMAL,0x7ff8000000000000LL,EXC_CHK_INVL},
{F64_POS_LNORMAL,F64_POS_HNORMAL,0x0000000000000000LL,EXC_CHK_UNFL},
{F64_POS_LNORMAL,F64_NEG_HNORMAL,0x7ff0000000000000LL,EXC_CHK_OVFL},
{F64_NEG_LNORMAL,F64_POS_LNORMAL,0x7ff8000000000000LL,EXC_CHK_INVL},//16

{0x4000000000000000LL,0X408FFF3333333333LL,0x7FEDDB680117AA8ELL,EXC_CHK_NONE},
{0x4000000000000000LL,0X4090000000000000LL,F64_POS_INF,EXC_CHK_OVFL},


{F64_POS_ZERO,0xC008000000000000LL,F64_POS_INF,EXC_CHK_ZERO},
{F64_NEG_ZERO,0xC008000000000000LL,F64_NEG_INF,EXC_CHK_ZERO},
{F64_POS_ZERO,0xC000000000000000LL,F64_POS_INF,EXC_CHK_ZERO},
{F64_NEG_ZERO,0xC000000000000000LL,F64_POS_INF,EXC_CHK_ZERO},
{F64_POS_ZERO,0x4008000000000000LL,F64_POS_ZERO,EXC_CHK_NONE},
{F64_NEG_ZERO,0x4008000000000000LL,F64_NEG_ZERO,EXC_CHK_NONE},
{F64_POS_ZERO,0x4000000000000000LL,F64_POS_ZERO,EXC_CHK_NONE},
{F64_NEG_ZERO,0x4000000000000000LL,F64_POS_ZERO,EXC_CHK_NONE},
{0xBFF0000000000000LL,F64_POS_INF,0x3FF0000000000000LL,EXC_CHK_NONE},
{0xBFF0000000000000LL,F64_NEG_INF,0x3FF0000000000000LL,EXC_CHK_NONE},
{0x3FF0000000000000LL,0x3FF0000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},
{0x3FF0000000000000LL,F64_POS_QNAN,0x3FF0000000000000LL,EXC_CHK_NONE},
{0x3FF0000000000000LL,F64_POS_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},
{0x3FF0000000000000LL,F64_NEG_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},
{F64_POS_QNAN,F64_POS_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},//33
{F64_NEG_QNAN,F64_POS_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},
{F64_POS_QNAN,F64_NEG_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},
{F64_NEG_QNAN,F64_NEG_ZERO,0x3FF0000000000000LL,EXC_CHK_NONE},
{0xBFF0000000000000LL,0x3FF8000000000000LL,F64_POS_QNAN,EXC_CHK_INVL},
{0x3FE0000000000000LL,F64_NEG_INF,F64_POS_INF,EXC_CHK_NONE},
{0x4000000000000000LL,F64_NEG_INF,F64_POS_ZERO,EXC_CHK_NONE},
{0x3FE0000000000000LL,F64_POS_INF,F64_POS_ZERO,EXC_CHK_NONE},//40
{0x4000000000000000LL,F64_POS_INF,F64_POS_INF,EXC_CHK_NONE},
{F64_NEG_INF,0xC008000000000000LL,F64_NEG_ZERO,EXC_CHK_NONE},
{F64_NEG_INF,0xC000000000000000LL,F64_POS_ZERO,EXC_CHK_NONE},
{F64_NEG_INF,0x4008000000000000LL,F64_NEG_INF,EXC_CHK_NONE},
{F64_NEG_INF,0x4000000000000000LL,F64_POS_INF,EXC_CHK_NONE},
{F64_POS_INF,0xC008000000000000LL,F64_POS_ZERO,EXC_CHK_NONE},
{F64_POS_INF,0x4008000000000000LL,F64_POS_INF,EXC_CHK_NONE},
{0x7FC55C576D815726LL,0xFFBC7B1F3CAC7433LL,F64_POS_ZERO,EXC_CHK_UNFL},
{0x00000000000017B8LL,0x3FBC7B1F3CAC7433LL,0x388e19fe6ea28b82LL,EXC_CHK_NONE},
{0x00000000000017B8LL,0xFFBC7B1F3CAC7433LL,F64_POS_INF,EXC_CHK_OVFL},//50


/*Additional Test cases for Accuracy Testing*/
{0x4080000000000000LL,0x4080000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //error
{0x4020f00000000000LL,0x3ff0000000000000LL,0x4020f00000000000LL,EXC_CHK_NONE},  // y == 1
{0x0000000000000000LL,0x4400000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // y is +large, x == 0
{0x3fe0000000000000LL,0x7ff0000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // y ==+inf ,   x < 1
{0x3fe0000000000000LL,0x4400000000000000LL,0x0000000000000000LL,EXC_CHK_UNFL},//55  // y is +large, x < 1
{0xbff0000000000000LL,0x7ff0000000000000LL,0x3ff0000000000000LL,EXC_CHK_NONE},  // y ==+inf, x == -1
{0xbff0000000000000LL,0x4400000000000000LL,0x3ff0000000000000LL,EXC_CHK_NONE},  // y is +large, x == -1
{0x4008000000000000LL,0x4400000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  // y is +large, |x| > 1
{0x4008000000000000LL,0x7ff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // y ==+inf, |x| > 1
{0xc008000000000000LL,0x4400000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},//60  // y is +large, |x| > 1
{0x4020f00000000000LL,0x7ff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // y ==+inf
{0x4020f00000000000LL,0x4400000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  // y is large
{0x0000000000000000LL,0xc400000000000000LL,0x7ff0000000000000LL,EXC_CHK_ZERO},  // y is -large, |x| ==0
{0x8000000000000000LL,0xfff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_ZERO},  // y ==-inf, |x| == 0
{0x3fe0000000000000LL,0xc400000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},//65  // y is -large, x < 1
{0x3fe0000000000000LL,0xfff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // y ==-inf, x < 1
{0x3ff0000000000000LL,0xc400000000000000LL,0x3ff0000000000000LL,EXC_CHK_NONE},  // y is -large, x == 1
{0x4000000000000000LL,0xc400000000000000LL,0x0000000000000000LL,EXC_CHK_UNFL},  // y is -large, x > 1
{0x4024000000000000LL,0xc073800000000000LL,0x0000002f201d49fbLL,EXC_CHK_UNFL},  //denormal
{0xc024000000000000LL,0xc073900000000000LL,0x80000004b6695433LL,EXC_CHK_UNFL},  //negative denormal
{0x4024000000000000LL,0xc080000000000000LL,0x0000000000000000LL,EXC_CHK_UNFL},  //complete underflow
{0x4020000000000000LL,0x40e0000000000000LL,0x7ff0000000000000LL,EXC_CHK_OVFL},  //overflow
{0x4024000000000000LL,0x3a00000000000000LL,0x3ff0000000000000LL,EXC_CHK_NONE},  //y is very small
{0xc024000000000000LL,0xc080080000000000LL,0x8000000000000000LL,EXC_CHK_UNFL},  //complete underflow
{0xc080000000000000LL,0x4060200000000000LL,0xfff0000000000000LL,EXC_CHK_OVFL},//75//overflow
{0x0000000000000000LL,0xc008000000000000LL,0x7ff0000000000000LL,EXC_CHK_ZERO},  //+0 ^ -odd integer       = +inf
{0x8000000000000000LL,0xc008000000000000LL,0xfff0000000000000LL,EXC_CHK_ZERO},  //-0 ^ -odd integer       = -inf
{0x0000000000000000LL,0xc010000000000000LL,0x7ff0000000000000LL,EXC_CHK_ZERO},  //+0 ^ -not odd integer   = +inf
{0x8000000000000000LL,0xc001000000000000LL,0x7ff0000000000000LL,EXC_CHK_ZERO},  //-0 ^ -not odd integer   = +inf
{0x0000000000000000LL,0x4008000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  //+0 ^ +odd integer       = +0
{0x8000000000000000LL,0x4008000000000000LL,0x8000000000000000LL,EXC_CHK_NONE},  //-0 ^ +odd integer       = -0
{0x0000000000000000LL,0x4010000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  //+0 ^ +not odd integer   = +0
{0x8000000000000000LL,0x4001000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  //-0 ^ +not odd integer   = +0
{0xbFF0000000000000LL,0x7ff0000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //-1 ^ +Inf               = +1
{0xbFF0000000000000LL,0xfff0000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},//85  //-1 ^ -Inf               = +1
{0x3FF0000000000000LL,0x7ff8000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //+1 ^ NaN   +1^y = +1 for ALL y, even NaN
{0x3FF0000000000000LL,0xfff8000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //+1 ^ NaN   +1^y = +1 for ALL y, even NaN
{0x3FF0000000000000LL,0x7ff0000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //+1 ^ +Inf               = +1
{0x3FF0000000000000LL,0xfff0000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //+1 ^ -Inf               = +1
{0x4000000000000000LL,0x0000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //any x ^ +0              = +1
{0x4000000000000000LL,0x8000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //any x ^ -0              = +1
{0x7ff0000000000000LL,0x0000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //any x ^ +0              = +1
{0xfff0000000000000LL,0x8000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //any x ^ -0              = +1
{0x7ff8000000000000LL,0x0000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},  //any x ^ +0              = +1  even NaN
{0xfff8000000000000LL,0x8000000000000000LL,0x3FF0000000000000LL,EXC_CHK_NONE},//95  //any x ^ -0              = +1  even NaN
{0x3fe8000000000000LL,0xfff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // |x|<1 ^ -inf       = +inf
{0xbfe8000000000000LL,0xfff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // |x|<1 ^ -inf       = +inf
{0x4024000000000000LL,0xfff0000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // |x|>1 ^ -inf       = +0
{0xc024c00000000000LL,0xfff0000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // |x|>1 ^ -inf       = +0
{0x3fe8000000000000LL,0x7ff0000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},//100  // |x|<1 ^ +inf       = +0
{0xbfe8000000000000LL,0x7ff0000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // |x|<1 ^ +inf       = +0
{0x4024000000000000LL,0x7ff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // |x|>1 ^ +inf       = +inf
{0xc024c00000000000LL,0x7ff0000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // |x|>1 ^ +inf       = +inf
{0xfff0000000000000LL,0xc008000000000000LL,0x8000000000000000LL,EXC_CHK_NONE},  // -inf ^ -odd integer = -0
{0xfff0000000000000LL,0xc010000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // -inf ^ - not odd integer = +0
{0xfff0000000000000LL,0xc001000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // -inf ^ - not odd integer = +0
{0xfff0000000000000LL,0x4008000000000000LL,0xfff0000000000000LL,EXC_CHK_NONE},  // -inf ^ +odd integer = -inf
{0xfff0000000000000LL,0x4010000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // -inf ^ +not odd integer = +inf
{0xfff0000000000000LL,0x401e000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // -inf ^ +not odd integer = +inf
{0x7ff0000000000000LL,0xc008000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},//110  // +inf ^ y<0 = +0
{0x7ff0000000000000LL,0xc010000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // +inf ^ y<0 = +0
{0x7ff0000000000000LL,0xc001000000000000LL,0x0000000000000000LL,EXC_CHK_NONE},  // +inf ^ y<0 = +0
{0x7ff0000000000000LL,0x4008000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // +inf ^ y<0 = +inf
{0x7ff0000000000000LL,0x4010000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // +inf ^ y<0 = +inf
{0x7ff0000000000000LL,0x4001000000000000LL,0x7ff0000000000000LL,EXC_CHK_NONE},  // +inf ^ y<0 = +inf
{0xc080000000000000LL,0x4060200000000000LL,0xfff0000000000000LL,EXC_CHK_OVFL},  //overflow
{0x4024000000000000LL,0xc073800000000000LL,0x0000002f201d49fbLL,EXC_CHK_UNFL},  //denormal
{0x3FE62E42FEFA39EFLL,0x3FE62E42FEFA39EFLL,0x3FE8D22A83215142LL,EXC_CHK_NONE},  //1/e,1/e
{0x3F7357915F4A462DLL,0x403F96C837AE808ALL,0x30AE8C4E628AE98BLL,EXC_CHK_NONE},  //0.0047221830942745626,31.5889925766974
{0xc008000000000000LL,0x4040000000000000LL,0x431A553F8878FA04LL,EXC_CHK_NONE},  //-3^32

    {F64_POS_ZERO,0xc06e800000000000LL,F64_POS_INF,EXC_CHK_ZERO},
    {F64_NEG_ZERO,0xc115193000000000LL,F64_POS_INF,EXC_CHK_ZERO},

};

