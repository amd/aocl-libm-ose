// polynomial for approximating 2^x in the given range [a,b] 
restart ;
prec = 53 ;      // precision 
N = 1000 ;      // number of points to be considered between the intervel [a,b] 
deg = 4 ; 		// polynomial degree
a = -0.5 ;     	// lower bound of the intervel   
b = -a ;     	// upper bound of the intervel 

// f(x) s the given function for which we seek  polynomial with minimal absolute error
f = 2^x ;

// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
poly = remez(f(x),deg,[a;b]) ; 

display = hexadecimal;

//print("abs error:", accurateinfnorm(f(x)-poly(x), [a;b], 30));
//print("rel error:", accurateinfnorm(poly(x)/f(x)-1, [a;b], 30));

// relative error computation fails 
// Make a array with given N points in the intervel [a;b] 
dx = (b-a)/(N-1) ;    // step size 
xi = [||] ; 
for i from 0 to N-1 do {xi = xi@[|a+i*dx|];} ;  

// Calculate the value of original function and approximated polynomial and relative error at given x 
abs_err = [||] ; 
rel_err = [||] ; 
for i from 0 to N-1 do {
y0 = f(xi[i]) ;    // True value 
y1 = poly(xi[i]) ; // Approximate value 
abs_err = abs_err@[|abs(y1-y0)|] ; 
rel_err = rel_err@[|abs(y1/y0-1)|] ; 
} ;

print("abs error:", dirtysimplify(max(abs_err)));
print("rel error:", dirtysimplify(max(rel_err)));
print("in [",a,b,"]");
print("coeffs:");
for i from 0 to deg do coeff(poly,i);
print(poly) ; 
