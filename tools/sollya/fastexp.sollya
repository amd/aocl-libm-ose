/*
 * Copyright (C) 2008-2022 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
// polynomial for approximating 2^x in the given range [a,b] 
restart ;
prec = 53 ;      // precision 
N = 1000 ;      // number of points to be considered between the intervel [a,b] 
deg = 4 ; 		// polynomial degree
a = -0.5 ;     	// lower bound of the intervel   
b = -a ;     	// upper bound of the intervel 

// f(x) s the given function for which we seek  polynomial with minimal absolute error
f = 2^x ;

// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
poly = remez(f(x),deg,[a;b]) ; 

display = hexadecimal;

//print("abs error:", accurateinfnorm(f(x)-poly(x), [a;b], 30));
//print("rel error:", accurateinfnorm(poly(x)/f(x)-1, [a;b], 30));

// relative error computation fails 
// Make a array with given N points in the intervel [a;b] 
dx = (b-a)/(N-1) ;    // step size 
xi = [||] ; 
for i from 0 to N-1 do {xi = xi@[|a+i*dx|];} ;  

// Calculate the value of original function and approximated polynomial and relative error at given x 
abs_err = [||] ; 
rel_err = [||] ; 
for i from 0 to N-1 do {
y0 = f(xi[i]) ;    // True value 
y1 = poly(xi[i]) ; // Approximate value 
abs_err = abs_err@[|abs(y1-y0)|] ; 
rel_err = rel_err@[|abs(y1/y0-1)|] ; 
} ;

print("abs error:", dirtysimplify(max(abs_err)));
print("rel error:", dirtysimplify(max(rel_err)));
print("in [",a,b,"]");
print("coeffs:");
for i from 0 to deg do coeff(poly,i);
print(poly) ; 
