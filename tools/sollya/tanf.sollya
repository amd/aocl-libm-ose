// polynomial for approximating tan(x) in the given range using Remez 
restart ;
prec = 54 ; 
N = 1000 ; 
deg = 15 ; // poly degree (choose a odd number)
a = -pi/4 ;     // upper bound of the intervel   
b = +pi/4 ;     // lower bound of the intervel 

// f(x) s the given function for which we seek  polynomial with minimal absolute error
f = tan(x) ;

// Generate basis of polynomial 
P = [||] ; 
for i from 1 to deg by 2  do {P = P@[|i|];} ;
// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
poly = remez(f(x),P,[a;b]) ; 
// display = hexadecimal;


// relative error computation fails 
// Make a array in th eintervel [a;b] 
dx = (b-a)/(N-1) ;
xi = [||] ; 
for i from 0 to N-1 do {xi = xi@[|a+i*dx|];} ;  
// Calculate the value of original function and approximated polynomial and relative error at given x 
abs_err = [||] ; 
rel_err = [||] ; 
for i from 0 to N-1 do {
y0 = f(xi[i]) ;    // True value 
y1 = poly(xi[i]) ; // Approximate value 
abs_err = abs_err@[|abs(y1-y0)|] ; 
rel_err = rel_err@[|abs(y1/y0-1)|] ; 
} ;
print(poly) ; 
prec = 54 ; 
print("abs error:", dirtysimplify(max(abs_err)));
print("rel error:", dirtysimplify(max(rel_err)));
print("in [",a,b,"]");
print("coeffs:");
display = hexadecimal ;

for i from 1 to deg by 2 do (coeff(poly,i));
print(poly) ; 
