// polynomial for approximating log(1+x)/log1p(x) using fpminimax  
restart ;
//prec = 53 ; 
N = 1000;

deg = 20; // poly degree
deg = 22; // poly degree
a = -1/3;  
b = +1/3 ; 

// find log(1+x) polynomial with minimal absolute error
f = log(1+x);

// poly = fpminimax(f,deg,[|prec...|],[a;b],floating,relative) ;
poly = fpminimax(f,[|1,...,deg|],[|prec...|],[a;b],floating,relative) ; 
//poly = fpminimax(f,[|1,...,deg-1|],[|prec...|],[a;b],floating,relative,x^deg) ; 

//print("abs error:", accurateinfnorm(f(x)-poly(x), [a;b], 30));
//print("rel error:", accurateinfnorm(poly(x)/f(x)-1, [a;b], 30));

// relative error computation fails 
// Make a array in th eintervel [a;b] 
dx = (b-a)/(N-1) ;
xi = [||] ; 
for i from 0 to N-1 do {xi = xi@[|a+i*dx|];} ;  
// Calculate the value of original function and approximated polynomial and relative error at given x 
abs_err = [||] ; 
rel_err = [||] ; 
for i from 0 to N-1 do {
y0 = f(xi[i]) ;    // True value 
y1 = poly(xi[i]) ; // Approximate value 
abs_err = abs_err@[|abs(y1-y0)|] ; 
rel_err = rel_err@[|abs(y1/y0-1)|] ; 
} ;
print(poly) ; 
print("abs error:", dirtysimplify(max(abs_err)));
print("rel error:", dirtysimplify(max(rel_err)));
print("in [",a,b,"]");
prec = 53 ; 
print("coeffs:");
for i from 0 to deg do double(coeff(poly,i));
print(poly) ; 
display = hexadecimal;
print("coeffs in hexadecimal:");
for i from 0 to deg do double(coeff(poly,i));
print(poly) ; 