
//split halfpi into halfpi1, halfpi2, halfpi3 
pi1 = single(pi) ;
pi2 = single(pi-pi1) ; 
pi3 = single(pi-pi1-pi2) ; 
//
halfpi1 = pi1/2 ; 
halfpi2 = pi2/2 ; 
halfpi3 = pi3/2; 

print("halfpi split into halfpi1, halfpi2, halfpi3") ; 
print("halfpi1 = ",single(halfpi1)) ; 
print("halfpi2 = ",single(halfpi2)) ;
print("halfpi3 = ",single(halfpi3)) ;

// polynomial for approximating tan(x) using fpminimax  

restart ;

N = 1000;				// Number of points to check in the give range 

deg = 15 ; 				// poly degree (choose an odd number)
a = -pi/4*0 ;  			// Lower bound of the range 
b = +pi/4 ; 			// Upper bound of the range 

// find f(x) functions polynomial with minimal absolute error
f = tan(x);

// Generate basis of polynomial f(x) 
P = [||] ; 
for i from 1 to deg by 2  do {P = P@[|i|];} ;

// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
// poly = remez(f(x),P,[a;b]) ; 
poly = fpminimax(f,P,[|DD...|],[a;b],floating,relative) ; 

// print("abs error:", accurateinfnorm(f(x)-poly(x), [a;b], 30));
// print("rel error:", accurateinfnorm(poly(x)/f(x)-1, [a;b], 30));

// relative error computation fails 
// Make a array in the intervel [a;b] 
dx = (b-a)/(N-1) ;		// step 
xi = [||] ; 
for i from 0 to N-1 do {xi = xi@[|a+i*dx|];} ;  

// Calculate the value of original function and approximated polynomial and relative error at given x 
abs_err = [||] ; 
rel_err = [||] ; 
for i from 0 to N-1 do 
{
	y0 = f(xi[i]) ;    // True value 
	y1 = poly(xi[i]) ; // Approximate value 
	abs_err = abs_err@[|abs(y1-y0)|] ; 
	rel_err = rel_err@[|abs(y1/y0-1)|] ; 
} ;
print("abs error:", dirtysimplify(max(abs_err)));
print("rel error:", dirtysimplify(max(rel_err)));
print("in [",a,b,"]");
print("coeffs:");
// display the coefficients in double 
for i from 1 to deg by 2 do single(coeff(poly,i));
print (poly) ; 
display = hexadecimal ;
for i from 1 to deg by 2 do single(coeff(poly,i));
print (poly) ; 
